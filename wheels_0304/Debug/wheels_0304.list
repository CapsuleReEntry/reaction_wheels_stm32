
wheels_0304.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005308  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080054a0  080054a0  000154a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005528  08005528  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005530  08005530  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08005538  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000100  08005638  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08005638  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b22  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223b  00000000  00000000  00030c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00032e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00033d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ee9  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127dd  00000000  00000000  0004ba29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2b8  00000000  00000000  0005e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed4be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004168  00000000  00000000  000ed510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005488 	.word	0x08005488

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08005488 	.word	0x08005488

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_uldivmod>:
 8000ab0:	b953      	cbnz	r3, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab2:	b94a      	cbnz	r2, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	2800      	cmpeq	r0, #0
 8000aba:	bf1c      	itt	ne
 8000abc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac4:	f000 b974 	b.w	8000db0 <__aeabi_idiv0>
 8000ac8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000acc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad0:	f000 f806 	bl	8000ae0 <__udivmoddi4>
 8000ad4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000adc:	b004      	add	sp, #16
 8000ade:	4770      	bx	lr

08000ae0 <__udivmoddi4>:
 8000ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae4:	9d08      	ldr	r5, [sp, #32]
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	468e      	mov	lr, r1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d14d      	bne.n	8000b8a <__udivmoddi4+0xaa>
 8000aee:	428a      	cmp	r2, r1
 8000af0:	4694      	mov	ip, r2
 8000af2:	d969      	bls.n	8000bc8 <__udivmoddi4+0xe8>
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	b152      	cbz	r2, 8000b10 <__udivmoddi4+0x30>
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	f1c2 0120 	rsb	r1, r2, #32
 8000b02:	fa20 f101 	lsr.w	r1, r0, r1
 8000b06:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0e:	4094      	lsls	r4, r2
 8000b10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b14:	0c21      	lsrs	r1, r4, #16
 8000b16:	fbbe f6f8 	udiv	r6, lr, r8
 8000b1a:	fa1f f78c 	uxth.w	r7, ip
 8000b1e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b26:	fb06 f107 	mul.w	r1, r6, r7
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	d90a      	bls.n	8000b44 <__udivmoddi4+0x64>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b36:	f080 811f 	bcs.w	8000d78 <__udivmoddi4+0x298>
 8000b3a:	4299      	cmp	r1, r3
 8000b3c:	f240 811c 	bls.w	8000d78 <__udivmoddi4+0x298>
 8000b40:	3e02      	subs	r6, #2
 8000b42:	4463      	add	r3, ip
 8000b44:	1a5b      	subs	r3, r3, r1
 8000b46:	b2a4      	uxth	r4, r4
 8000b48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b54:	fb00 f707 	mul.w	r7, r0, r7
 8000b58:	42a7      	cmp	r7, r4
 8000b5a:	d90a      	bls.n	8000b72 <__udivmoddi4+0x92>
 8000b5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b64:	f080 810a 	bcs.w	8000d7c <__udivmoddi4+0x29c>
 8000b68:	42a7      	cmp	r7, r4
 8000b6a:	f240 8107 	bls.w	8000d7c <__udivmoddi4+0x29c>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b76:	1be4      	subs	r4, r4, r7
 8000b78:	2600      	movs	r6, #0
 8000b7a:	b11d      	cbz	r5, 8000b84 <__udivmoddi4+0xa4>
 8000b7c:	40d4      	lsrs	r4, r2
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e9c5 4300 	strd	r4, r3, [r5]
 8000b84:	4631      	mov	r1, r6
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0xc2>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	f000 80ef 	beq.w	8000d72 <__udivmoddi4+0x292>
 8000b94:	2600      	movs	r6, #0
 8000b96:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	fab3 f683 	clz	r6, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d14a      	bne.n	8000c40 <__udivmoddi4+0x160>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d302      	bcc.n	8000bb4 <__udivmoddi4+0xd4>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	f200 80f9 	bhi.w	8000da6 <__udivmoddi4+0x2c6>
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d0e0      	beq.n	8000b84 <__udivmoddi4+0xa4>
 8000bc2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc6:	e7dd      	b.n	8000b84 <__udivmoddi4+0xa4>
 8000bc8:	b902      	cbnz	r2, 8000bcc <__udivmoddi4+0xec>
 8000bca:	deff      	udf	#255	; 0xff
 8000bcc:	fab2 f282 	clz	r2, r2
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	f040 8092 	bne.w	8000cfa <__udivmoddi4+0x21a>
 8000bd6:	eba1 010c 	sub.w	r1, r1, ip
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f fe8c 	uxth.w	lr, ip
 8000be2:	2601      	movs	r6, #1
 8000be4:	0c20      	lsrs	r0, r4, #16
 8000be6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bea:	fb07 1113 	mls	r1, r7, r3, r1
 8000bee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf2:	fb0e f003 	mul.w	r0, lr, r3
 8000bf6:	4288      	cmp	r0, r1
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x12c>
 8000bfa:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x12a>
 8000c04:	4288      	cmp	r0, r1
 8000c06:	f200 80cb 	bhi.w	8000da0 <__udivmoddi4+0x2c0>
 8000c0a:	4643      	mov	r3, r8
 8000c0c:	1a09      	subs	r1, r1, r0
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c14:	fb07 1110 	mls	r1, r7, r0, r1
 8000c18:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x156>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2c:	d202      	bcs.n	8000c34 <__udivmoddi4+0x154>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f200 80bb 	bhi.w	8000daa <__udivmoddi4+0x2ca>
 8000c34:	4608      	mov	r0, r1
 8000c36:	eba4 040e 	sub.w	r4, r4, lr
 8000c3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3e:	e79c      	b.n	8000b7a <__udivmoddi4+0x9a>
 8000c40:	f1c6 0720 	rsb	r7, r6, #32
 8000c44:	40b3      	lsls	r3, r6
 8000c46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c52:	fa01 f306 	lsl.w	r3, r1, r6
 8000c56:	431c      	orrs	r4, r3
 8000c58:	40f9      	lsrs	r1, r7
 8000c5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5e:	fa00 f306 	lsl.w	r3, r0, r6
 8000c62:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c66:	0c20      	lsrs	r0, r4, #16
 8000c68:	fa1f fe8c 	uxth.w	lr, ip
 8000c6c:	fb09 1118 	mls	r1, r9, r8, r1
 8000c70:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c74:	fb08 f00e 	mul.w	r0, r8, lr
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7e:	d90b      	bls.n	8000c98 <__udivmoddi4+0x1b8>
 8000c80:	eb1c 0101 	adds.w	r1, ip, r1
 8000c84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c88:	f080 8088 	bcs.w	8000d9c <__udivmoddi4+0x2bc>
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	f240 8085 	bls.w	8000d9c <__udivmoddi4+0x2bc>
 8000c92:	f1a8 0802 	sub.w	r8, r8, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	1a09      	subs	r1, r1, r0
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ca0:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	458e      	cmp	lr, r1
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x1e2>
 8000cb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb8:	d26c      	bcs.n	8000d94 <__udivmoddi4+0x2b4>
 8000cba:	458e      	cmp	lr, r1
 8000cbc:	d96a      	bls.n	8000d94 <__udivmoddi4+0x2b4>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	4461      	add	r1, ip
 8000cc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc6:	fba0 9402 	umull	r9, r4, r0, r2
 8000cca:	eba1 010e 	sub.w	r1, r1, lr
 8000cce:	42a1      	cmp	r1, r4
 8000cd0:	46c8      	mov	r8, r9
 8000cd2:	46a6      	mov	lr, r4
 8000cd4:	d356      	bcc.n	8000d84 <__udivmoddi4+0x2a4>
 8000cd6:	d053      	beq.n	8000d80 <__udivmoddi4+0x2a0>
 8000cd8:	b15d      	cbz	r5, 8000cf2 <__udivmoddi4+0x212>
 8000cda:	ebb3 0208 	subs.w	r2, r3, r8
 8000cde:	eb61 010e 	sbc.w	r1, r1, lr
 8000ce2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce6:	fa22 f306 	lsr.w	r3, r2, r6
 8000cea:	40f1      	lsrs	r1, r6
 8000cec:	431f      	orrs	r7, r3
 8000cee:	e9c5 7100 	strd	r7, r1, [r5]
 8000cf2:	2600      	movs	r6, #0
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	f1c2 0320 	rsb	r3, r2, #32
 8000cfe:	40d8      	lsrs	r0, r3
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	fa21 f303 	lsr.w	r3, r1, r3
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	4301      	orrs	r1, r0
 8000d0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d18:	fb07 3610 	mls	r6, r7, r0, r3
 8000d1c:	0c0b      	lsrs	r3, r1, #16
 8000d1e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d22:	fb00 f60e 	mul.w	r6, r0, lr
 8000d26:	429e      	cmp	r6, r3
 8000d28:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x260>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d36:	d22f      	bcs.n	8000d98 <__udivmoddi4+0x2b8>
 8000d38:	429e      	cmp	r6, r3
 8000d3a:	d92d      	bls.n	8000d98 <__udivmoddi4+0x2b8>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1b9b      	subs	r3, r3, r6
 8000d42:	b289      	uxth	r1, r1
 8000d44:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d48:	fb07 3316 	mls	r3, r7, r6, r3
 8000d4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d50:	fb06 f30e 	mul.w	r3, r6, lr
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x28a>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d60:	d216      	bcs.n	8000d90 <__udivmoddi4+0x2b0>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d914      	bls.n	8000d90 <__udivmoddi4+0x2b0>
 8000d66:	3e02      	subs	r6, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d70:	e738      	b.n	8000be4 <__udivmoddi4+0x104>
 8000d72:	462e      	mov	r6, r5
 8000d74:	4628      	mov	r0, r5
 8000d76:	e705      	b.n	8000b84 <__udivmoddi4+0xa4>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	e6e3      	b.n	8000b44 <__udivmoddi4+0x64>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6f8      	b.n	8000b72 <__udivmoddi4+0x92>
 8000d80:	454b      	cmp	r3, r9
 8000d82:	d2a9      	bcs.n	8000cd8 <__udivmoddi4+0x1f8>
 8000d84:	ebb9 0802 	subs.w	r8, r9, r2
 8000d88:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	e7a3      	b.n	8000cd8 <__udivmoddi4+0x1f8>
 8000d90:	4646      	mov	r6, r8
 8000d92:	e7ea      	b.n	8000d6a <__udivmoddi4+0x28a>
 8000d94:	4620      	mov	r0, r4
 8000d96:	e794      	b.n	8000cc2 <__udivmoddi4+0x1e2>
 8000d98:	4640      	mov	r0, r8
 8000d9a:	e7d1      	b.n	8000d40 <__udivmoddi4+0x260>
 8000d9c:	46d0      	mov	r8, sl
 8000d9e:	e77b      	b.n	8000c98 <__udivmoddi4+0x1b8>
 8000da0:	3b02      	subs	r3, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	e732      	b.n	8000c0c <__udivmoddi4+0x12c>
 8000da6:	4630      	mov	r0, r6
 8000da8:	e709      	b.n	8000bbe <__udivmoddi4+0xde>
 8000daa:	4464      	add	r4, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	e742      	b.n	8000c36 <__udivmoddi4+0x156>

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a2c      	ldr	r2, [pc, #176]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	4812      	ldr	r0, [pc, #72]	; (8000e88 <MX_GPIO_Init+0xd4>)
 8000e40:	f001 f9fa 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <MX_GPIO_Init+0xd8>)
 8000e5c:	f001 f868 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e60:	2320      	movs	r3, #32
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_GPIO_Init+0xd4>)
 8000e78:	f001 f85a 	bl	8001f30 <HAL_GPIO_Init>

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020800 	.word	0x40020800

08000e90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <MX_I2C1_Init+0x54>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000e9c:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <MX_I2C1_Init+0x58>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ece:	f001 f9cd 	bl	800226c <HAL_I2C_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ed8:	f000 f912 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000011c 	.word	0x2000011c
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	000186a0 	.word	0x000186a0

08000eec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <HAL_I2C_MspInit+0x84>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12b      	bne.n	8000f66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f2a:	23c0      	movs	r3, #192	; 0xc0
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2e:	2312      	movs	r3, #18
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <HAL_I2C_MspInit+0x8c>)
 8000f46:	f000 fff3 	bl	8001f30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40005400 	.word	0x40005400
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020400 	.word	0x40020400

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b096      	sub	sp, #88	; 0x58
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f82:	f000 fe59 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f86:	f000 f84f 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8a:	f7ff ff13 	bl	8000db4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f8e:	f000 fdb7 	bl	8001b00 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f92:	f000 fcb7 	bl	8001904 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000f96:	f7ff ff7b 	bl	8000e90 <MX_I2C1_Init>
  while (MPU6050_Init(&hi2c1) == 1);
 8000f9a:	bf00      	nop
 8000f9c:	481f      	ldr	r0, [pc, #124]	; (800101c <main+0xa0>)
 8000f9e:	f000 f8b4 	bl	800110a <MPU6050_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d0f9      	beq.n	8000f9c <main+0x20>

  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK){Error_Handler();}
 8000fa8:	2100      	movs	r1, #0
 8000faa:	481d      	ldr	r0, [pc, #116]	; (8001020 <main+0xa4>)
 8000fac:	f002 fe5e 	bl	8003c6c <HAL_TIM_PWM_Start>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <main+0x3e>
 8000fb6:	f000 f8a3 	bl	8001100 <Error_Handler>

  HAL_Delay(1000);
 8000fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbe:	f000 fead 	bl	8001d1c <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <main+0xa4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(1000);
 8000fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fce:	f000 fea5 	bl	8001d1c <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4811      	ldr	r0, [pc, #68]	; (800101c <main+0xa0>)
 8000fd8:	f000 f8ee 	bl	80011b8 <MPU6050_Read_All>
	  HAL_Delay(100);
 8000fdc:	2064      	movs	r0, #100	; 0x64
 8000fde:	f000 fe9d 	bl	8001d1c <HAL_Delay>


	  if (MPU6050.Gz > 1.5){
 8000fe2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <main+0xa8>)
 8000fec:	f7ff fd40 	bl	8000a70 <__aeabi_dcmpgt>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d010      	beq.n	8001018 <main+0x9c>
		  HAL_Delay(1000);
 8000ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffa:	f000 fe8f 	bl	8001d1c <HAL_Delay>
		  	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <main+0xa4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	635a      	str	r2, [r3, #52]	; 0x34


		  HAL_Delay(1000);
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f000 fe87 	bl	8001d1c <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 900);
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <main+0xa4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001016:	635a      	str	r2, [r3, #52]	; 0x34
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001018:	e7db      	b.n	8000fd2 <main+0x56>
 800101a:	bf00      	nop
 800101c:	2000011c 	.word	0x2000011c
 8001020:	20000174 	.word	0x20000174
 8001024:	3ff80000 	.word	0x3ff80000

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f003 feca 	bl	8004dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <SystemClock_Config+0xd0>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a28      	ldr	r2, [pc, #160]	; (80010f8 <SystemClock_Config+0xd0>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <SystemClock_Config+0xd0>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <SystemClock_Config+0xd4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <SystemClock_Config+0xd4>)
 8001076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <SystemClock_Config+0xd4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2310      	movs	r3, #16
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001094:	2302      	movs	r3, #2
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001098:	2300      	movs	r3, #0
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800109c:	2310      	movs	r3, #16
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010aa:	2307      	movs	r3, #7
 80010ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 f89a 	bl	80031ec <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010be:	f000 f81f 	bl	8001100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2302      	movs	r3, #2
 80010c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2102      	movs	r1, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fafc 	bl	80036dc <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010ea:	f000 f809 	bl	8001100 <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3750      	adds	r7, #80	; 0x50
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>

0800110a <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800110a:	b580      	push	{r7, lr}
 800110c:	b088      	sub	sp, #32
 800110e:	af04      	add	r7, sp, #16
 8001110:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	f107 030f 	add.w	r3, r7, #15
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2275      	movs	r2, #117	; 0x75
 8001124:	21d0      	movs	r1, #208	; 0xd0
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f001 fade 	bl	80026e8 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2b68      	cmp	r3, #104	; 0x68
 8001130:	d13d      	bne.n	80011ae <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001136:	2364      	movs	r3, #100	; 0x64
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	2301      	movs	r3, #1
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	f107 030e 	add.w	r3, r7, #14
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	226b      	movs	r2, #107	; 0x6b
 8001148:	21d0      	movs	r1, #208	; 0xd0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f001 f9d2 	bl	80024f4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001150:	2307      	movs	r3, #7
 8001152:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	f107 030e 	add.w	r3, r7, #14
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	2219      	movs	r2, #25
 8001166:	21d0      	movs	r1, #208	; 0xd0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f001 f9c3 	bl	80024f4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800116e:	2300      	movs	r3, #0
 8001170:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001172:	2364      	movs	r3, #100	; 0x64
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	f107 030e 	add.w	r3, r7, #14
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	221c      	movs	r2, #28
 8001184:	21d0      	movs	r1, #208	; 0xd0
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f001 f9b4 	bl	80024f4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800118c:	2300      	movs	r3, #0
 800118e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	f107 030e 	add.w	r3, r7, #14
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	221b      	movs	r2, #27
 80011a2:	21d0      	movs	r1, #208	; 0xd0
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f001 f9a5 	bl	80024f4 <HAL_I2C_Mem_Write>
        return 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <MPU6050_Init+0xa6>
    }
    return 1;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80011b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011bc:	b094      	sub	sp, #80	; 0x50
 80011be:	af04      	add	r7, sp, #16
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	230e      	movs	r3, #14
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	223b      	movs	r2, #59	; 0x3b
 80011d6:	21d0      	movs	r1, #208	; 0xd0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f001 fa85 	bl	80026e8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80011de:	7a3b      	ldrb	r3, [r7, #8]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7a7b      	ldrb	r3, [r7, #9]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80011f0:	7abb      	ldrb	r3, [r7, #10]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001202:	7b3b      	ldrb	r3, [r7, #12]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	7b7b      	ldrb	r3, [r7, #13]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21a      	sxth	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001214:	7bbb      	ldrb	r3, [r7, #14]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21a      	sxth	r2, r3
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001222:	7c3b      	ldrb	r3, [r7, #16]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7c7b      	ldrb	r3, [r7, #17]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001234:	7cbb      	ldrb	r3, [r7, #18]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	7cfb      	ldrb	r3, [r7, #19]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21a      	sxth	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001246:	7d3b      	ldrb	r3, [r7, #20]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21a      	sxth	r2, r3
 800124c:	7d7b      	ldrb	r3, [r7, #21]
 800124e:	b21b      	sxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b21a      	sxth	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f90c 	bl	800047c <__aeabi_i2d>
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4bbd      	ldr	r3, [pc, #756]	; (8001560 <MPU6050_Read_All+0x3a8>)
 800126a:	f7ff fa9b 	bl	80007a4 <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f8fc 	bl	800047c <__aeabi_i2d>
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4bb5      	ldr	r3, [pc, #724]	; (8001560 <MPU6050_Read_All+0x3a8>)
 800128a:	f7ff fa8b 	bl	80007a4 <__aeabi_ddiv>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	6839      	ldr	r1, [r7, #0]
 8001294:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8ec 	bl	800047c <__aeabi_i2d>
 80012a4:	a3a8      	add	r3, pc, #672	; (adr r3, 8001548 <MPU6050_Read_All+0x390>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff fa7b 	bl	80007a4 <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80012b8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001564 <MPU6050_Read_All+0x3ac>
 80012c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012cc:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001568 <MPU6050_Read_All+0x3b0>
 80012d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f8cb 	bl	800047c <__aeabi_i2d>
 80012e6:	a39a      	add	r3, pc, #616	; (adr r3, 8001550 <MPU6050_Read_All+0x398>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff fa5a 	bl	80007a4 <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	6839      	ldr	r1, [r7, #0]
 80012f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f8bb 	bl	800047c <__aeabi_i2d>
 8001306:	a392      	add	r3, pc, #584	; (adr r3, 8001550 <MPU6050_Read_All+0x398>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff fa4a 	bl	80007a4 <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8ab 	bl	800047c <__aeabi_i2d>
 8001326:	a38a      	add	r3, pc, #552	; (adr r3, 8001550 <MPU6050_Read_All+0x398>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff fa3a 	bl	80007a4 <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	6839      	ldr	r1, [r7, #0]
 8001336:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800133a:	f000 fce3 	bl	8001d04 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	4b8a      	ldr	r3, [pc, #552]	; (800156c <MPU6050_Read_All+0x3b4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f888 	bl	800045c <__aeabi_ui2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b87      	ldr	r3, [pc, #540]	; (8001570 <MPU6050_Read_All+0x3b8>)
 8001352:	f7ff fa27 	bl	80007a4 <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800135e:	f000 fcd1 	bl	8001d04 <HAL_GetTick>
 8001362:	4603      	mov	r3, r0
 8001364:	4a81      	ldr	r2, [pc, #516]	; (800156c <MPU6050_Read_All+0x3b4>)
 8001366:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	461a      	mov	r2, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	fb03 f202 	mul.w	r2, r3, r2
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001380:	4619      	mov	r1, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f874 	bl	800047c <__aeabi_i2d>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	ec43 2b10 	vmov	d0, r2, r3
 800139c:	f003 fecb 	bl	8005136 <sqrt>
 80013a0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013b0:	f7ff fb36 	bl	8000a20 <__aeabi_dcmpeq>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d11f      	bne.n	80013fa <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f85b 	bl	800047c <__aeabi_i2d>
 80013c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013ca:	f7ff f9eb 	bl	80007a4 <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	ec43 2b17 	vmov	d7, r2, r3
 80013d6:	eeb0 0a47 	vmov.f32	s0, s14
 80013da:	eef0 0a67 	vmov.f32	s1, s15
 80013de:	f003 fcff 	bl	8004de0 <atan>
 80013e2:	ec51 0b10 	vmov	r0, r1, d0
 80013e6:	a35c      	add	r3, pc, #368	; (adr r3, 8001558 <MPU6050_Read_All+0x3a0>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f8b0 	bl	8000550 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80013f8:	e005      	b.n	8001406 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	425b      	negs	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f834 	bl	800047c <__aeabi_i2d>
 8001414:	4682      	mov	sl, r0
 8001416:	468b      	mov	fp, r1
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f82c 	bl	800047c <__aeabi_i2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	ec43 2b11 	vmov	d1, r2, r3
 800142c:	ec4b ab10 	vmov	d0, sl, fp
 8001430:	f003 fe7f 	bl	8005132 <atan2>
 8001434:	ec51 0b10 	vmov	r0, r1, d0
 8001438:	a347      	add	r3, pc, #284	; (adr r3, 8001558 <MPU6050_Read_All+0x3a0>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7ff f887 	bl	8000550 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b49      	ldr	r3, [pc, #292]	; (8001574 <MPU6050_Read_All+0x3bc>)
 8001450:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001454:	f7ff faee 	bl	8000a34 <__aeabi_dcmplt>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <MPU6050_Read_All+0x2bc>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b43      	ldr	r3, [pc, #268]	; (8001578 <MPU6050_Read_All+0x3c0>)
 800146a:	f7ff fb01 	bl	8000a70 <__aeabi_dcmpgt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d114      	bne.n	800149e <MPU6050_Read_All+0x2e6>
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <MPU6050_Read_All+0x3c0>)
 800147a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800147e:	f7ff faf7 	bl	8000a70 <__aeabi_dcmpgt>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d015      	beq.n	80014b4 <MPU6050_Read_All+0x2fc>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <MPU6050_Read_All+0x3bc>)
 8001494:	f7ff face 	bl	8000a34 <__aeabi_dcmplt>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00a      	beq.n	80014b4 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 800149e:	4937      	ldr	r1, [pc, #220]	; (800157c <MPU6050_Read_All+0x3c4>)
 80014a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80014b2:	e014      	b.n	80014de <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80014ba:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80014be:	eeb0 1a47 	vmov.f32	s2, s14
 80014c2:	eef0 1a67 	vmov.f32	s3, s15
 80014c6:	ed97 0b06 	vldr	d0, [r7, #24]
 80014ca:	482c      	ldr	r0, [pc, #176]	; (800157c <MPU6050_Read_All+0x3c4>)
 80014cc:	f000 f85a 	bl	8001584 <Kalman_getAngle>
 80014d0:	eeb0 7a40 	vmov.f32	s14, s0
 80014d4:	eef0 7a60 	vmov.f32	s15, s1
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80014e4:	4690      	mov	r8, r2
 80014e6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MPU6050_Read_All+0x3c0>)
 80014f0:	4640      	mov	r0, r8
 80014f2:	4649      	mov	r1, r9
 80014f4:	f7ff fabc 	bl	8000a70 <__aeabi_dcmpgt>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001504:	4614      	mov	r4, r2
 8001506:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001516:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800151a:	eeb0 1a47 	vmov.f32	s2, s14
 800151e:	eef0 1a67 	vmov.f32	s3, s15
 8001522:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001526:	4816      	ldr	r0, [pc, #88]	; (8001580 <MPU6050_Read_All+0x3c8>)
 8001528:	f000 f82c 	bl	8001584 <Kalman_getAngle>
 800152c:	eeb0 7a40 	vmov.f32	s14, s0
 8001530:	eef0 7a60 	vmov.f32	s15, s1
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 800153a:	bf00      	nop
 800153c:	3740      	adds	r7, #64	; 0x40
 800153e:	46bd      	mov	sp, r7
 8001540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001544:	f3af 8000 	nop.w
 8001548:	00000000 	.word	0x00000000
 800154c:	40cc2900 	.word	0x40cc2900
 8001550:	00000000 	.word	0x00000000
 8001554:	40606000 	.word	0x40606000
 8001558:	1a63c1f8 	.word	0x1a63c1f8
 800155c:	404ca5dc 	.word	0x404ca5dc
 8001560:	40d00000 	.word	0x40d00000
 8001564:	43aa0000 	.word	0x43aa0000
 8001568:	42121eb8 	.word	0x42121eb8
 800156c:	20000170 	.word	0x20000170
 8001570:	408f4000 	.word	0x408f4000
 8001574:	c0568000 	.word	0xc0568000
 8001578:	40568000 	.word	0x40568000
 800157c:	20000048 	.word	0x20000048
 8001580:	20000000 	.word	0x20000000

08001584 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b096      	sub	sp, #88	; 0x58
 8001588:	af00      	add	r7, sp, #0
 800158a:	61f8      	str	r0, [r7, #28]
 800158c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001590:	ed87 1b02 	vstr	d1, [r7, #8]
 8001594:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800159e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015a2:	f7fe fe1d 	bl	80001e0 <__aeabi_dsub>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015bc:	f7fe ffc8 	bl	8000550 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4620      	mov	r0, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	f7fe fe0c 	bl	80001e4 <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	69f9      	ldr	r1, [r7, #28]
 80015d2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e6:	f7fe ffb3 	bl	8000550 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015f8:	f7fe fdf2 	bl	80001e0 <__aeabi_dsub>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800160a:	f7fe fde9 	bl	80001e0 <__aeabi_dsub>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe fde2 	bl	80001e4 <__adddf3>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800162c:	f7fe ff90 	bl	8000550 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7fe fdd4 	bl	80001e4 <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	69f9      	ldr	r1, [r7, #28]
 8001642:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001656:	f7fe ff7b 	bl	8000550 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4620      	mov	r0, r4
 8001660:	4629      	mov	r1, r5
 8001662:	f7fe fdbd 	bl	80001e0 <__aeabi_dsub>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	69f9      	ldr	r1, [r7, #28]
 800166c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800167c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001680:	f7fe ff66 	bl	8000550 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe fda8 	bl	80001e0 <__aeabi_dsub>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	69f9      	ldr	r1, [r7, #28]
 8001696:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016aa:	f7fe ff51 	bl	8000550 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4620      	mov	r0, r4
 80016b4:	4629      	mov	r1, r5
 80016b6:	f7fe fd95 	bl	80001e4 <__adddf3>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	69f9      	ldr	r1, [r7, #28]
 80016c0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016d0:	f7fe fd88 	bl	80001e4 <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016e6:	f7ff f85d 	bl	80007a4 <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016fc:	f7ff f852 	bl	80007a4 <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800170e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001712:	f7fe fd65 	bl	80001e0 <__aeabi_dsub>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001724:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001728:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800172c:	f7fe ff10 	bl	8000550 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe fd54 	bl	80001e4 <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	69f9      	ldr	r1, [r7, #28]
 8001742:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800174c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001750:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001754:	f7fe fefc 	bl	8000550 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fd40 	bl	80001e4 <__adddf3>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	69f9      	ldr	r1, [r7, #28]
 800176a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001774:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800177e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001788:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800178c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001790:	f7fe fede 	bl	8000550 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4620      	mov	r0, r4
 800179a:	4629      	mov	r1, r5
 800179c:	f7fe fd20 	bl	80001e0 <__aeabi_dsub>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	69f9      	ldr	r1, [r7, #28]
 80017a6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80017b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017b8:	f7fe feca 	bl	8000550 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe fd0c 	bl	80001e0 <__aeabi_dsub>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	69f9      	ldr	r1, [r7, #28]
 80017ce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80017d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017e0:	f7fe feb6 	bl	8000550 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7fe fcf8 	bl	80001e0 <__aeabi_dsub>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	69f9      	ldr	r1, [r7, #28]
 80017f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001800:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001804:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001808:	f7fe fea2 	bl	8000550 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4620      	mov	r0, r4
 8001812:	4629      	mov	r1, r5
 8001814:	f7fe fce4 	bl	80001e0 <__aeabi_dsub>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	69f9      	ldr	r1, [r7, #28]
 800181e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001828:	ec43 2b17 	vmov	d7, r2, r3
};
 800182c:	eeb0 0a47 	vmov.f32	s0, s14
 8001830:	eef0 0a67 	vmov.f32	s1, s15
 8001834:	3758      	adds	r7, #88	; 0x58
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_MspInit+0x4c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <HAL_MspInit+0x4c>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_MspInit+0x4c>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_MspInit+0x4c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a08      	ldr	r2, [pc, #32]	; (8001888 <HAL_MspInit+0x4c>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_MspInit+0x4c>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800187a:	2007      	movs	r0, #7
 800187c:	f000 fb24 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 fa00 	bl	8001cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b096      	sub	sp, #88	; 0x58
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2220      	movs	r2, #32
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f003 fa47 	bl	8004dd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001942:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <MX_TIM1_Init+0x13c>)
 8001944:	4a3f      	ldr	r2, [pc, #252]	; (8001a44 <MX_TIM1_Init+0x140>)
 8001946:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001948:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <MX_TIM1_Init+0x13c>)
 800194a:	2253      	movs	r2, #83	; 0x53
 800194c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <MX_TIM1_Init+0x13c>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <MX_TIM1_Init+0x13c>)
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <MX_TIM1_Init+0x13c>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001962:	4b37      	ldr	r3, [pc, #220]	; (8001a40 <MX_TIM1_Init+0x13c>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <MX_TIM1_Init+0x13c>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800196e:	4834      	ldr	r0, [pc, #208]	; (8001a40 <MX_TIM1_Init+0x13c>)
 8001970:	f002 f8d4 	bl	8003b1c <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800197a:	f7ff fbc1 	bl	8001100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001984:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001988:	4619      	mov	r1, r3
 800198a:	482d      	ldr	r0, [pc, #180]	; (8001a40 <MX_TIM1_Init+0x13c>)
 800198c:	f002 fae0 	bl	8003f50 <HAL_TIM_ConfigClockSource>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001996:	f7ff fbb3 	bl	8001100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800199a:	4829      	ldr	r0, [pc, #164]	; (8001a40 <MX_TIM1_Init+0x13c>)
 800199c:	f002 f90d 	bl	8003bba <HAL_TIM_PWM_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80019a6:	f7ff fbab 	bl	8001100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b6:	4619      	mov	r1, r3
 80019b8:	4821      	ldr	r0, [pc, #132]	; (8001a40 <MX_TIM1_Init+0x13c>)
 80019ba:	f002 fe5d 	bl	8004678 <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019c4:	f7ff fb9c 	bl	8001100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c8:	2360      	movs	r3, #96	; 0x60
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 80019cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d6:	2300      	movs	r3, #0
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ea:	2200      	movs	r2, #0
 80019ec:	4619      	mov	r1, r3
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <MX_TIM1_Init+0x13c>)
 80019f0:	f002 f9ec 	bl	8003dcc <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80019fa:	f7ff fb81 	bl	8001100 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4807      	ldr	r0, [pc, #28]	; (8001a40 <MX_TIM1_Init+0x13c>)
 8001a22:	f002 fe97 	bl	8004754 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001a2c:	f7ff fb68 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a30:	4803      	ldr	r0, [pc, #12]	; (8001a40 <MX_TIM1_Init+0x13c>)
 8001a32:	f000 f82b 	bl	8001a8c <HAL_TIM_MspPostInit>

}
 8001a36:	bf00      	nop
 8001a38:	3758      	adds	r7, #88	; 0x58
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000174 	.word	0x20000174
 8001a44:	40010000 	.word	0x40010000

08001a48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_TIM_Base_MspInit+0x3c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10d      	bne.n	8001a76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_TIM_Base_MspInit+0x40>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_TIM_Base_MspInit+0x40>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_TIM_Base_MspInit+0x40>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <HAL_TIM_MspPostInit+0x68>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d11e      	bne.n	8001aec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_TIM_MspPostInit+0x6c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <HAL_TIM_MspPostInit+0x6c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_TIM_MspPostInit+0x6c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ace:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <HAL_TIM_MspPostInit+0x70>)
 8001ae8:	f000 fa22 	bl	8001f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <MX_USART2_UART_Init+0x50>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b38:	f002 fe5e 	bl	80047f8 <HAL_UART_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b42:	f7ff fadd 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200001bc 	.word	0x200001bc
 8001b50:	40004400 	.word	0x40004400

08001b54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12b      	bne.n	8001bce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bae:	230c      	movs	r3, #12
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <HAL_UART_MspInit+0x8c>)
 8001bca:	f000 f9b1 	bl	8001f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40004400 	.word	0x40004400
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000

08001be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bea:	490e      	ldr	r1, [pc, #56]	; (8001c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bec:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf0:	e002      	b.n	8001bf8 <LoopCopyDataInit>

08001bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf6:	3304      	adds	r3, #4

08001bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bfc:	d3f9      	bcc.n	8001bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c00:	4c0b      	ldr	r4, [pc, #44]	; (8001c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c04:	e001      	b.n	8001c0a <LoopFillZerobss>

08001c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c08:	3204      	adds	r2, #4

08001c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c0c:	d3fb      	bcc.n	8001c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c0e:	f7ff fe67 	bl	80018e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c12:	f003 f8b9 	bl	8004d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c16:	f7ff f9b1 	bl	8000f7c <main>
  bx  lr    
 8001c1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001c28:	08005538 	.word	0x08005538
  ldr r2, =_sbss
 8001c2c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001c30:	20000204 	.word	0x20000204

08001c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_Init+0x40>)
 8001c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_Init+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_Init+0x40>)
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_Init+0x40>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f000 f931 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f808 	bl	8001c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c6c:	f7ff fde6 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x54>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_InitTick+0x58>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f93b 	bl	8001f16 <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00e      	b.n	8001cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d80a      	bhi.n	8001cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f000 f911 	bl	8001ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_InitTick+0x5c>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000090 	.word	0x20000090
 8001cd4:	20000098 	.word	0x20000098
 8001cd8:	20000094 	.word	0x20000094

08001cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x24>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_IncTick+0x24>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000098 	.word	0x20000098
 8001d00:	20000200 	.word	0x20000200

08001d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_GetTick+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000200 	.word	0x20000200

08001d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff ffee 	bl	8001d04 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d005      	beq.n	8001d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_Delay+0x44>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d42:	bf00      	nop
 8001d44:	f7ff ffde 	bl	8001d04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d8f7      	bhi.n	8001d44 <HAL_Delay+0x28>
  {
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000098 	.word	0x20000098

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	; (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f7ff ff8e 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff47 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff5c 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff8e 	bl	8001e1c <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5d 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffb0 	bl	8001e84 <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	e159      	b.n	8002200 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	f040 8148 	bne.w	80021fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d005      	beq.n	8001f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d130      	bne.n	8001fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 0201 	and.w	r2, r3, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d017      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d123      	bne.n	8002074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	08da      	lsrs	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3208      	adds	r2, #8
 8002034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	08da      	lsrs	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3208      	adds	r2, #8
 800206e:	69b9      	ldr	r1, [r7, #24]
 8002070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0203 	and.w	r2, r3, #3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80a2 	beq.w	80021fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b57      	ldr	r3, [pc, #348]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a56      	ldr	r2, [pc, #344]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b54      	ldr	r3, [pc, #336]	; (8002218 <HAL_GPIO_Init+0x2e8>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d2:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_GPIO_Init+0x2ec>)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a49      	ldr	r2, [pc, #292]	; (8002220 <HAL_GPIO_Init+0x2f0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d019      	beq.n	8002132 <HAL_GPIO_Init+0x202>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a48      	ldr	r2, [pc, #288]	; (8002224 <HAL_GPIO_Init+0x2f4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0x1fe>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a47      	ldr	r2, [pc, #284]	; (8002228 <HAL_GPIO_Init+0x2f8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00d      	beq.n	800212a <HAL_GPIO_Init+0x1fa>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_GPIO_Init+0x2fc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x1f6>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a45      	ldr	r2, [pc, #276]	; (8002230 <HAL_GPIO_Init+0x300>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_GPIO_Init+0x1f2>
 800211e:	2304      	movs	r3, #4
 8002120:	e008      	b.n	8002134 <HAL_GPIO_Init+0x204>
 8002122:	2307      	movs	r3, #7
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x204>
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x204>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x204>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x204>
 8002132:	2300      	movs	r3, #0
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f002 0203 	and.w	r2, r2, #3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002144:	4935      	ldr	r1, [pc, #212]	; (800221c <HAL_GPIO_Init+0x2ec>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_GPIO_Init+0x304>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002176:	4a2f      	ldr	r2, [pc, #188]	; (8002234 <HAL_GPIO_Init+0x304>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_GPIO_Init+0x304>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a0:	4a24      	ldr	r2, [pc, #144]	; (8002234 <HAL_GPIO_Init+0x304>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a6:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_GPIO_Init+0x304>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ca:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <HAL_GPIO_Init+0x304>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <HAL_GPIO_Init+0x304>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f4:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <HAL_GPIO_Init+0x304>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	f67f aea2 	bls.w	8001f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40013800 	.word	0x40013800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400
 8002228:	40020800 	.word	0x40020800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40021000 	.word	0x40021000
 8002234:	40013c00 	.word	0x40013c00

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002254:	e003      	b.n	800225e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	041a      	lsls	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	619a      	str	r2, [r3, #24]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e12b      	b.n	80024d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fe2a 	bl	8000eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2224      	movs	r2, #36	; 0x24
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d0:	f001 fbfc 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4a81      	ldr	r2, [pc, #516]	; (80024e0 <HAL_I2C_Init+0x274>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d807      	bhi.n	80022f0 <HAL_I2C_Init+0x84>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a80      	ldr	r2, [pc, #512]	; (80024e4 <HAL_I2C_Init+0x278>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bf94      	ite	ls
 80022e8:	2301      	movls	r3, #1
 80022ea:	2300      	movhi	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e006      	b.n	80022fe <HAL_I2C_Init+0x92>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a7d      	ldr	r2, [pc, #500]	; (80024e8 <HAL_I2C_Init+0x27c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0e7      	b.n	80024d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a78      	ldr	r2, [pc, #480]	; (80024ec <HAL_I2C_Init+0x280>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0c9b      	lsrs	r3, r3, #18
 8002310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <HAL_I2C_Init+0x274>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d802      	bhi.n	8002340 <HAL_I2C_Init+0xd4>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	e009      	b.n	8002354 <HAL_I2C_Init+0xe8>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	4a69      	ldr	r2, [pc, #420]	; (80024f0 <HAL_I2C_Init+0x284>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	3301      	adds	r3, #1
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	495c      	ldr	r1, [pc, #368]	; (80024e0 <HAL_I2C_Init+0x274>)
 8002370:	428b      	cmp	r3, r1
 8002372:	d819      	bhi.n	80023a8 <HAL_I2C_Init+0x13c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e59      	subs	r1, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002382:	1c59      	adds	r1, r3, #1
 8002384:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002388:	400b      	ands	r3, r1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_I2C_Init+0x138>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e59      	subs	r1, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fbb1 f3f3 	udiv	r3, r1, r3
 800239c:	3301      	adds	r3, #1
 800239e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a2:	e051      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e04f      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d111      	bne.n	80023d4 <HAL_I2C_Init+0x168>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e58      	subs	r0, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e012      	b.n	80023fa <HAL_I2C_Init+0x18e>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e58      	subs	r0, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	0099      	lsls	r1, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Init+0x196>
 80023fe:	2301      	movs	r3, #1
 8002400:	e022      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10e      	bne.n	8002428 <HAL_I2C_Init+0x1bc>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e58      	subs	r0, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	440b      	add	r3, r1
 8002418:	fbb0 f3f3 	udiv	r3, r0, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002426:	e00f      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	0099      	lsls	r1, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	fbb0 f3f3 	udiv	r3, r0, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	6809      	ldr	r1, [r1, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6911      	ldr	r1, [r2, #16]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68d2      	ldr	r2, [r2, #12]
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	000186a0 	.word	0x000186a0
 80024e4:	001e847f 	.word	0x001e847f
 80024e8:	003d08ff 	.word	0x003d08ff
 80024ec:	431bde83 	.word	0x431bde83
 80024f0:	10624dd3 	.word	0x10624dd3

080024f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	461a      	mov	r2, r3
 8002502:	4603      	mov	r3, r0
 8002504:	817b      	strh	r3, [r7, #10]
 8002506:	460b      	mov	r3, r1
 8002508:	813b      	strh	r3, [r7, #8]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800250e:	f7ff fbf9 	bl	8001d04 <HAL_GetTick>
 8002512:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b20      	cmp	r3, #32
 800251e:	f040 80d9 	bne.w	80026d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2319      	movs	r3, #25
 8002528:	2201      	movs	r2, #1
 800252a:	496d      	ldr	r1, [pc, #436]	; (80026e0 <HAL_I2C_Mem_Write+0x1ec>)
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fc7f 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002538:	2302      	movs	r3, #2
 800253a:	e0cc      	b.n	80026d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_I2C_Mem_Write+0x56>
 8002546:	2302      	movs	r3, #2
 8002548:	e0c5      	b.n	80026d6 <HAL_I2C_Mem_Write+0x1e2>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d007      	beq.n	8002570 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2221      	movs	r2, #33	; 0x21
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4a4d      	ldr	r2, [pc, #308]	; (80026e4 <HAL_I2C_Mem_Write+0x1f0>)
 80025b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025b2:	88f8      	ldrh	r0, [r7, #6]
 80025b4:	893a      	ldrh	r2, [r7, #8]
 80025b6:	8979      	ldrh	r1, [r7, #10]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4603      	mov	r3, r0
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fab6 	bl	8002b34 <I2C_RequestMemoryWrite>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d052      	beq.n	8002674 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e081      	b.n	80026d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fd00 	bl	8002fdc <I2C_WaitOnTXEFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00d      	beq.n	80025fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d107      	bne.n	80025fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06b      	b.n	80026d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	781a      	ldrb	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d11b      	bne.n	8002674 <HAL_I2C_Mem_Write+0x180>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	d017      	beq.n	8002674 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1aa      	bne.n	80025d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fcec 	bl	800305e <I2C_WaitOnBTFFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b04      	cmp	r3, #4
 8002692:	d107      	bne.n	80026a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e016      	b.n	80026d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	00100002 	.word	0x00100002
 80026e4:	ffff0000 	.word	0xffff0000

080026e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	; 0x30
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	460b      	mov	r3, r1
 80026fc:	813b      	strh	r3, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002702:	f7ff faff 	bl	8001d04 <HAL_GetTick>
 8002706:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b20      	cmp	r3, #32
 8002712:	f040 8208 	bne.w	8002b26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2319      	movs	r3, #25
 800271c:	2201      	movs	r2, #1
 800271e:	497b      	ldr	r1, [pc, #492]	; (800290c <HAL_I2C_Mem_Read+0x224>)
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fb85 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
 800272e:	e1fb      	b.n	8002b28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_I2C_Mem_Read+0x56>
 800273a:	2302      	movs	r3, #2
 800273c:	e1f4      	b.n	8002b28 <HAL_I2C_Mem_Read+0x440>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d007      	beq.n	8002764 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002772:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2222      	movs	r2, #34	; 0x22
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2240      	movs	r2, #64	; 0x40
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800278e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002794:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a5b      	ldr	r2, [pc, #364]	; (8002910 <HAL_I2C_Mem_Read+0x228>)
 80027a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a6:	88f8      	ldrh	r0, [r7, #6]
 80027a8:	893a      	ldrh	r2, [r7, #8]
 80027aa:	8979      	ldrh	r1, [r7, #10]
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	4603      	mov	r3, r0
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fa52 	bl	8002c60 <I2C_RequestMemoryRead>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e1b0      	b.n	8002b28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d113      	bne.n	80027f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	623b      	str	r3, [r7, #32]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	623b      	str	r3, [r7, #32]
 80027e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e184      	b.n	8002b00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d11b      	bne.n	8002836 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	e164      	b.n	8002b00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	2b02      	cmp	r3, #2
 800283c:	d11b      	bne.n	8002876 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800285c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	e144      	b.n	8002b00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800288c:	e138      	b.n	8002b00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	2b03      	cmp	r3, #3
 8002894:	f200 80f1 	bhi.w	8002a7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	2b01      	cmp	r3, #1
 800289e:	d123      	bne.n	80028e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fc1b 	bl	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e139      	b.n	8002b28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028e6:	e10b      	b.n	8002b00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d14e      	bne.n	800298e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f6:	2200      	movs	r2, #0
 80028f8:	4906      	ldr	r1, [pc, #24]	; (8002914 <HAL_I2C_Mem_Read+0x22c>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fa98 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e10e      	b.n	8002b28 <HAL_I2C_Mem_Read+0x440>
 800290a:	bf00      	nop
 800290c:	00100002 	.word	0x00100002
 8002910:	ffff0000 	.word	0xffff0000
 8002914:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800298c:	e0b8      	b.n	8002b00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	2200      	movs	r2, #0
 8002996:	4966      	ldr	r1, [pc, #408]	; (8002b30 <HAL_I2C_Mem_Read+0x448>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fa49 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0bf      	b.n	8002b28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f0:	2200      	movs	r2, #0
 80029f2:	494f      	ldr	r1, [pc, #316]	; (8002b30 <HAL_I2C_Mem_Read+0x448>)
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fa1b 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e091      	b.n	8002b28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a78:	e042      	b.n	8002b00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fb2e 	bl	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e04c      	b.n	8002b28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d118      	bne.n	8002b00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f47f aec2 	bne.w	800288e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e000      	b.n	8002b28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
  }
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3728      	adds	r7, #40	; 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	00010004 	.word	0x00010004

08002b34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	460b      	mov	r3, r1
 8002b48:	813b      	strh	r3, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f960 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b84:	d103      	bne.n	8002b8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e05f      	b.n	8002c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	492d      	ldr	r1, [pc, #180]	; (8002c5c <I2C_RequestMemoryWrite+0x128>)
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f998 	bl	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e04c      	b.n	8002c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fa02 	bl	8002fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d107      	bne.n	8002bf6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e02b      	b.n	8002c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c00:	893b      	ldrh	r3, [r7, #8]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	e021      	b.n	8002c50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c0c:	893b      	ldrh	r3, [r7, #8]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	6a39      	ldr	r1, [r7, #32]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f9dc 	bl	8002fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d107      	bne.n	8002c42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e005      	b.n	8002c52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c46:	893b      	ldrh	r3, [r7, #8]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	00010002 	.word	0x00010002

08002c60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	817b      	strh	r3, [r7, #10]
 8002c72:	460b      	mov	r3, r1
 8002c74:	813b      	strh	r3, [r7, #8]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f8c2 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc0:	d103      	bne.n	8002cca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0aa      	b.n	8002e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	4952      	ldr	r1, [pc, #328]	; (8002e2c <I2C_RequestMemoryRead+0x1cc>)
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f8fa 	bl	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e097      	b.n	8002e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f964 	bl	8002fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d107      	bne.n	8002d32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e076      	b.n	8002e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d3c:	893b      	ldrh	r3, [r7, #8]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	611a      	str	r2, [r3, #16]
 8002d46:	e021      	b.n	8002d8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d48:	893b      	ldrh	r3, [r7, #8]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f93e 	bl	8002fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d107      	bne.n	8002d7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e050      	b.n	8002e24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d82:	893b      	ldrh	r3, [r7, #8]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8e:	6a39      	ldr	r1, [r7, #32]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f923 	bl	8002fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d107      	bne.n	8002db4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e035      	b.n	8002e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f82b 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00d      	beq.n	8002dfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dee:	d103      	bne.n	8002df8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e013      	b.n	8002e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dfc:	897b      	ldrh	r3, [r7, #10]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	6a3a      	ldr	r2, [r7, #32]
 8002e10:	4906      	ldr	r1, [pc, #24]	; (8002e2c <I2C_RequestMemoryRead+0x1cc>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f863 	bl	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	00010002 	.word	0x00010002

08002e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e40:	e025      	b.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d021      	beq.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4a:	f7fe ff5b 	bl	8001d04 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d302      	bcc.n	8002e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d116      	bne.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e023      	b.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d10d      	bne.n	8002eb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bf0c      	ite	eq
 8002eaa:	2301      	moveq	r3, #1
 8002eac:	2300      	movne	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	e00c      	b.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d0b6      	beq.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eec:	e051      	b.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efc:	d123      	bne.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f043 0204 	orr.w	r2, r3, #4
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e046      	b.n	8002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d021      	beq.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4e:	f7fe fed9 	bl	8001d04 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d116      	bne.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f043 0220 	orr.w	r2, r3, #32
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e020      	b.n	8002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10c      	bne.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e00b      	b.n	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d18d      	bne.n	8002eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe8:	e02d      	b.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f8ce 	bl	800318c <I2C_IsAcknowledgeFailed>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e02d      	b.n	8003056 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d021      	beq.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7fe fe7f 	bl	8001d04 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d116      	bne.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e007      	b.n	8003056 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d1ca      	bne.n	8002fea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800306a:	e02d      	b.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f88d 	bl	800318c <I2C_IsAcknowledgeFailed>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e02d      	b.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d021      	beq.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003084:	f7fe fe3e 	bl	8001d04 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	429a      	cmp	r2, r3
 8003092:	d302      	bcc.n	800309a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d116      	bne.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e007      	b.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d1ca      	bne.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ec:	e042      	b.n	8003174 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d119      	bne.n	8003130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0210 	mvn.w	r2, #16
 8003104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e029      	b.n	8003184 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003130:	f7fe fde8 	bl	8001d04 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	429a      	cmp	r2, r3
 800313e:	d302      	bcc.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e007      	b.n	8003184 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	d1b5      	bne.n	80030ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d11b      	bne.n	80031dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f043 0204 	orr.w	r2, r3, #4
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e267      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d075      	beq.n	80032f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800320a:	4b88      	ldr	r3, [pc, #544]	; (800342c <HAL_RCC_OscConfig+0x240>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b04      	cmp	r3, #4
 8003214:	d00c      	beq.n	8003230 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b85      	ldr	r3, [pc, #532]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800321e:	2b08      	cmp	r3, #8
 8003220:	d112      	bne.n	8003248 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003222:	4b82      	ldr	r3, [pc, #520]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322e:	d10b      	bne.n	8003248 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	4b7e      	ldr	r3, [pc, #504]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d05b      	beq.n	80032f4 <HAL_RCC_OscConfig+0x108>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d157      	bne.n	80032f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e242      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x74>
 8003252:	4b76      	ldr	r3, [pc, #472]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a75      	ldr	r2, [pc, #468]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e01d      	b.n	800329c <HAL_RCC_OscConfig+0xb0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x98>
 800326a:	4b70      	ldr	r3, [pc, #448]	; (800342c <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6f      	ldr	r2, [pc, #444]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b6d      	ldr	r3, [pc, #436]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6c      	ldr	r2, [pc, #432]	; (800342c <HAL_RCC_OscConfig+0x240>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0xb0>
 8003284:	4b69      	ldr	r3, [pc, #420]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a68      	ldr	r2, [pc, #416]	; (800342c <HAL_RCC_OscConfig+0x240>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b66      	ldr	r3, [pc, #408]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a65      	ldr	r2, [pc, #404]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7fe fd2e 	bl	8001d04 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fd2a 	bl	8001d04 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e207      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b5b      	ldr	r3, [pc, #364]	; (800342c <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0xc0>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fe fd1a 	bl	8001d04 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe fd16 	bl	8001d04 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e1f3      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	4b51      	ldr	r3, [pc, #324]	; (800342c <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0xe8>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d063      	beq.n	80033ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003302:	4b4a      	ldr	r3, [pc, #296]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003316:	2b08      	cmp	r3, #8
 8003318:	d11c      	bne.n	8003354 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331a:	4b44      	ldr	r3, [pc, #272]	; (800342c <HAL_RCC_OscConfig+0x240>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	4b41      	ldr	r3, [pc, #260]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x152>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e1c7      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4937      	ldr	r1, [pc, #220]	; (800342c <HAL_RCC_OscConfig+0x240>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	e03a      	b.n	80033ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335c:	4b34      	ldr	r3, [pc, #208]	; (8003430 <HAL_RCC_OscConfig+0x244>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe fccf 	bl	8001d04 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336a:	f7fe fccb 	bl	8001d04 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1a8      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003388:	4b28      	ldr	r3, [pc, #160]	; (800342c <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4925      	ldr	r1, [pc, #148]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
 800339c:	e015      	b.n	80033ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <HAL_RCC_OscConfig+0x244>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe fcae 	bl	8001d04 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ac:	f7fe fcaa 	bl	8001d04 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e187      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d036      	beq.n	8003444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <HAL_RCC_OscConfig+0x248>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7fe fc8e 	bl	8001d04 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ec:	f7fe fc8a 	bl	8001d04 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e167      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_OscConfig+0x240>)
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x200>
 800340a:	e01b      	b.n	8003444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_RCC_OscConfig+0x248>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003412:	f7fe fc77 	bl	8001d04 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	e00e      	b.n	8003438 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341a:	f7fe fc73 	bl	8001d04 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d907      	bls.n	8003438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e150      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
 800342c:	40023800 	.word	0x40023800
 8003430:	42470000 	.word	0x42470000
 8003434:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_OscConfig+0x470>)
 800343a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1ea      	bne.n	800341a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 8097 	beq.w	8003580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003456:	4b81      	ldr	r3, [pc, #516]	; (800365c <HAL_RCC_OscConfig+0x470>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10f      	bne.n	8003482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	4b7d      	ldr	r3, [pc, #500]	; (800365c <HAL_RCC_OscConfig+0x470>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	4a7c      	ldr	r2, [pc, #496]	; (800365c <HAL_RCC_OscConfig+0x470>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003470:	6413      	str	r3, [r2, #64]	; 0x40
 8003472:	4b7a      	ldr	r3, [pc, #488]	; (800365c <HAL_RCC_OscConfig+0x470>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	4b77      	ldr	r3, [pc, #476]	; (8003660 <HAL_RCC_OscConfig+0x474>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d118      	bne.n	80034c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348e:	4b74      	ldr	r3, [pc, #464]	; (8003660 <HAL_RCC_OscConfig+0x474>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a73      	ldr	r2, [pc, #460]	; (8003660 <HAL_RCC_OscConfig+0x474>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349a:	f7fe fc33 	bl	8001d04 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7fe fc2f 	bl	8001d04 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e10c      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <HAL_RCC_OscConfig+0x474>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x2ea>
 80034c8:	4b64      	ldr	r3, [pc, #400]	; (800365c <HAL_RCC_OscConfig+0x470>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a63      	ldr	r2, [pc, #396]	; (800365c <HAL_RCC_OscConfig+0x470>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	e01c      	b.n	8003510 <HAL_RCC_OscConfig+0x324>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x30c>
 80034de:	4b5f      	ldr	r3, [pc, #380]	; (800365c <HAL_RCC_OscConfig+0x470>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a5e      	ldr	r2, [pc, #376]	; (800365c <HAL_RCC_OscConfig+0x470>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ea:	4b5c      	ldr	r3, [pc, #368]	; (800365c <HAL_RCC_OscConfig+0x470>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a5b      	ldr	r2, [pc, #364]	; (800365c <HAL_RCC_OscConfig+0x470>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
 80034f6:	e00b      	b.n	8003510 <HAL_RCC_OscConfig+0x324>
 80034f8:	4b58      	ldr	r3, [pc, #352]	; (800365c <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4a57      	ldr	r2, [pc, #348]	; (800365c <HAL_RCC_OscConfig+0x470>)
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	6713      	str	r3, [r2, #112]	; 0x70
 8003504:	4b55      	ldr	r3, [pc, #340]	; (800365c <HAL_RCC_OscConfig+0x470>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	4a54      	ldr	r2, [pc, #336]	; (800365c <HAL_RCC_OscConfig+0x470>)
 800350a:	f023 0304 	bic.w	r3, r3, #4
 800350e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d015      	beq.n	8003544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003518:	f7fe fbf4 	bl	8001d04 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fe fbf0 	bl	8001d04 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0cb      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	4b49      	ldr	r3, [pc, #292]	; (800365c <HAL_RCC_OscConfig+0x470>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ee      	beq.n	8003520 <HAL_RCC_OscConfig+0x334>
 8003542:	e014      	b.n	800356e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003544:	f7fe fbde 	bl	8001d04 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354a:	e00a      	b.n	8003562 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7fe fbda 	bl	8001d04 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e0b5      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	4b3e      	ldr	r3, [pc, #248]	; (800365c <HAL_RCC_OscConfig+0x470>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ee      	bne.n	800354c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d105      	bne.n	8003580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003574:	4b39      	ldr	r3, [pc, #228]	; (800365c <HAL_RCC_OscConfig+0x470>)
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	4a38      	ldr	r2, [pc, #224]	; (800365c <HAL_RCC_OscConfig+0x470>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80a1 	beq.w	80036cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800358a:	4b34      	ldr	r3, [pc, #208]	; (800365c <HAL_RCC_OscConfig+0x470>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b08      	cmp	r3, #8
 8003594:	d05c      	beq.n	8003650 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d141      	bne.n	8003622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b31      	ldr	r3, [pc, #196]	; (8003664 <HAL_RCC_OscConfig+0x478>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe fbae 	bl	8001d04 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe fbaa 	bl	8001d04 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e087      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_OscConfig+0x470>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	3b01      	subs	r3, #1
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	061b      	lsls	r3, r3, #24
 80035ee:	491b      	ldr	r1, [pc, #108]	; (800365c <HAL_RCC_OscConfig+0x470>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x478>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fe fb83 	bl	8001d04 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003602:	f7fe fb7f 	bl	8001d04 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e05c      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_RCC_OscConfig+0x470>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x416>
 8003620:	e054      	b.n	80036cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	4b10      	ldr	r3, [pc, #64]	; (8003664 <HAL_RCC_OscConfig+0x478>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe fb6c 	bl	8001d04 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe fb68 	bl	8001d04 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e045      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCC_OscConfig+0x470>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x444>
 800364e:	e03d      	b.n	80036cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e038      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
 800365c:	40023800 	.word	0x40023800
 8003660:	40007000 	.word	0x40007000
 8003664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_RCC_OscConfig+0x4ec>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d028      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d121      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d11a      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800369e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d111      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	3b01      	subs	r3, #1
 80036b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800

080036dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0cc      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f0:	4b68      	ldr	r3, [pc, #416]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d90c      	bls.n	8003718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b63      	ldr	r3, [pc, #396]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0b8      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d020      	beq.n	8003766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003730:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4a58      	ldr	r2, [pc, #352]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800373a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003748:	4b53      	ldr	r3, [pc, #332]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a52      	ldr	r2, [pc, #328]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003754:	4b50      	ldr	r3, [pc, #320]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	494d      	ldr	r1, [pc, #308]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d044      	beq.n	80037fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	4b47      	ldr	r3, [pc, #284]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d119      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e07f      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d003      	beq.n	800379a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003796:	2b03      	cmp	r3, #3
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379a:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e06f      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037aa:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e067      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ba:	4b37      	ldr	r3, [pc, #220]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f023 0203 	bic.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4934      	ldr	r1, [pc, #208]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037cc:	f7fe fa9a 	bl	8001d04 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d4:	f7fe fa96 	bl	8001d04 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e04f      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 020c 	and.w	r2, r3, #12
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d1eb      	bne.n	80037d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037fc:	4b25      	ldr	r3, [pc, #148]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d20c      	bcs.n	8003824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b22      	ldr	r3, [pc, #136]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b20      	ldr	r3, [pc, #128]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e032      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003830:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4916      	ldr	r1, [pc, #88]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	490e      	ldr	r1, [pc, #56]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003862:	f000 f821 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8003866:	4602      	mov	r2, r0
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	490a      	ldr	r1, [pc, #40]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	5ccb      	ldrb	r3, [r1, r3]
 8003876:	fa22 f303 	lsr.w	r3, r2, r3
 800387a:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe f9fa 	bl	8001c7c <HAL_InitTick>

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023c00 	.word	0x40023c00
 8003898:	40023800 	.word	0x40023800
 800389c:	080054a0 	.word	0x080054a0
 80038a0:	20000090 	.word	0x20000090
 80038a4:	20000094 	.word	0x20000094

080038a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ac:	b094      	sub	sp, #80	; 0x50
 80038ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	647b      	str	r3, [r7, #68]	; 0x44
 80038b4:	2300      	movs	r3, #0
 80038b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b8:	2300      	movs	r3, #0
 80038ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c0:	4b79      	ldr	r3, [pc, #484]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d00d      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x40>
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	f200 80e1 	bhi.w	8003a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x34>
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d003      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038da:	e0db      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038dc:	4b73      	ldr	r3, [pc, #460]	; (8003aac <HAL_RCC_GetSysClockFreq+0x204>)
 80038de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038e0:	e0db      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038e2:	4b73      	ldr	r3, [pc, #460]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80038e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038e6:	e0d8      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038e8:	4b6f      	ldr	r3, [pc, #444]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038f2:	4b6d      	ldr	r3, [pc, #436]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d063      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fe:	4b6a      	ldr	r3, [pc, #424]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	099b      	lsrs	r3, r3, #6
 8003904:	2200      	movs	r2, #0
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
 8003908:	63fa      	str	r2, [r7, #60]	; 0x3c
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003910:	633b      	str	r3, [r7, #48]	; 0x30
 8003912:	2300      	movs	r3, #0
 8003914:	637b      	str	r3, [r7, #52]	; 0x34
 8003916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800391a:	4622      	mov	r2, r4
 800391c:	462b      	mov	r3, r5
 800391e:	f04f 0000 	mov.w	r0, #0
 8003922:	f04f 0100 	mov.w	r1, #0
 8003926:	0159      	lsls	r1, r3, #5
 8003928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800392c:	0150      	lsls	r0, r2, #5
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4621      	mov	r1, r4
 8003934:	1a51      	subs	r1, r2, r1
 8003936:	6139      	str	r1, [r7, #16]
 8003938:	4629      	mov	r1, r5
 800393a:	eb63 0301 	sbc.w	r3, r3, r1
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800394c:	4659      	mov	r1, fp
 800394e:	018b      	lsls	r3, r1, #6
 8003950:	4651      	mov	r1, sl
 8003952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003956:	4651      	mov	r1, sl
 8003958:	018a      	lsls	r2, r1, #6
 800395a:	4651      	mov	r1, sl
 800395c:	ebb2 0801 	subs.w	r8, r2, r1
 8003960:	4659      	mov	r1, fp
 8003962:	eb63 0901 	sbc.w	r9, r3, r1
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800397a:	4690      	mov	r8, r2
 800397c:	4699      	mov	r9, r3
 800397e:	4623      	mov	r3, r4
 8003980:	eb18 0303 	adds.w	r3, r8, r3
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	462b      	mov	r3, r5
 8003988:	eb49 0303 	adc.w	r3, r9, r3
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800399a:	4629      	mov	r1, r5
 800399c:	024b      	lsls	r3, r1, #9
 800399e:	4621      	mov	r1, r4
 80039a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039a4:	4621      	mov	r1, r4
 80039a6:	024a      	lsls	r2, r1, #9
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ae:	2200      	movs	r2, #0
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039b8:	f7fd f87a 	bl	8000ab0 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4613      	mov	r3, r2
 80039c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c4:	e058      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c6:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	2200      	movs	r2, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	4611      	mov	r1, r2
 80039d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039d6:	623b      	str	r3, [r7, #32]
 80039d8:	2300      	movs	r3, #0
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
 80039dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	f04f 0000 	mov.w	r0, #0
 80039e8:	f04f 0100 	mov.w	r1, #0
 80039ec:	0159      	lsls	r1, r3, #5
 80039ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f2:	0150      	lsls	r0, r2, #5
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4641      	mov	r1, r8
 80039fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80039fe:	4649      	mov	r1, r9
 8003a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a18:	ebb2 040a 	subs.w	r4, r2, sl
 8003a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	00eb      	lsls	r3, r5, #3
 8003a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a2e:	00e2      	lsls	r2, r4, #3
 8003a30:	4614      	mov	r4, r2
 8003a32:	461d      	mov	r5, r3
 8003a34:	4643      	mov	r3, r8
 8003a36:	18e3      	adds	r3, r4, r3
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	464b      	mov	r3, r9
 8003a3c:	eb45 0303 	adc.w	r3, r5, r3
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a4e:	4629      	mov	r1, r5
 8003a50:	028b      	lsls	r3, r1, #10
 8003a52:	4621      	mov	r1, r4
 8003a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a58:	4621      	mov	r1, r4
 8003a5a:	028a      	lsls	r2, r1, #10
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a62:	2200      	movs	r2, #0
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	61fa      	str	r2, [r7, #28]
 8003a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a6c:	f7fd f820 	bl	8000ab0 <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4613      	mov	r3, r2
 8003a76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	3301      	adds	r3, #1
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a92:	e002      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCC_GetSysClockFreq+0x204>)
 8003a96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3750      	adds	r7, #80	; 0x50
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	00f42400 	.word	0x00f42400
 8003ab0:	007a1200 	.word	0x007a1200

08003ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab8:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aba:	681b      	ldr	r3, [r3, #0]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000090 	.word	0x20000090

08003acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ad0:	f7ff fff0 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	0a9b      	lsrs	r3, r3, #10
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4903      	ldr	r1, [pc, #12]	; (8003af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	080054b0 	.word	0x080054b0

08003af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003af8:	f7ff ffdc 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	0b5b      	lsrs	r3, r3, #13
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4903      	ldr	r1, [pc, #12]	; (8003b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	080054b0 	.word	0x080054b0

08003b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e041      	b.n	8003bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd ff80 	bl	8001a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f000 fac0 	bl	80040e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e041      	b.n	8003c50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f839 	bl	8003c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f000 fa71 	bl	80040e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_TIM_PWM_Start+0x24>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e022      	b.n	8003cd6 <HAL_TIM_PWM_Start+0x6a>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d109      	bne.n	8003caa <HAL_TIM_PWM_Start+0x3e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	bf14      	ite	ne
 8003ca2:	2301      	movne	r3, #1
 8003ca4:	2300      	moveq	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	e015      	b.n	8003cd6 <HAL_TIM_PWM_Start+0x6a>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d109      	bne.n	8003cc4 <HAL_TIM_PWM_Start+0x58>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e008      	b.n	8003cd6 <HAL_TIM_PWM_Start+0x6a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e068      	b.n	8003db0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d104      	bne.n	8003cee <HAL_TIM_PWM_Start+0x82>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cec:	e013      	b.n	8003d16 <HAL_TIM_PWM_Start+0xaa>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_PWM_Start+0x92>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cfc:	e00b      	b.n	8003d16 <HAL_TIM_PWM_Start+0xaa>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_PWM_Start+0xa2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d0c:	e003      	b.n	8003d16 <HAL_TIM_PWM_Start+0xaa>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fc84 	bl	800462c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <HAL_TIM_PWM_Start+0x14c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d107      	bne.n	8003d3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <HAL_TIM_PWM_Start+0x14c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d018      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x10e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d50:	d013      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x10e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a19      	ldr	r2, [pc, #100]	; (8003dbc <HAL_TIM_PWM_Start+0x150>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00e      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x10e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <HAL_TIM_PWM_Start+0x154>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d009      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x10e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <HAL_TIM_PWM_Start+0x158>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x10e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <HAL_TIM_PWM_Start+0x15c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d111      	bne.n	8003d9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b06      	cmp	r3, #6
 8003d8a:	d010      	beq.n	8003dae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9c:	e007      	b.n	8003dae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40000800 	.word	0x40000800
 8003dc4:	40000c00 	.word	0x40000c00
 8003dc8:	40014000 	.word	0x40014000

08003dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0ae      	b.n	8003f48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b0c      	cmp	r3, #12
 8003df6:	f200 809f 	bhi.w	8003f38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08003f39 	.word	0x08003f39
 8003e08:	08003f39 	.word	0x08003f39
 8003e0c:	08003f39 	.word	0x08003f39
 8003e10:	08003e75 	.word	0x08003e75
 8003e14:	08003f39 	.word	0x08003f39
 8003e18:	08003f39 	.word	0x08003f39
 8003e1c:	08003f39 	.word	0x08003f39
 8003e20:	08003eb7 	.word	0x08003eb7
 8003e24:	08003f39 	.word	0x08003f39
 8003e28:	08003f39 	.word	0x08003f39
 8003e2c:	08003f39 	.word	0x08003f39
 8003e30:	08003ef7 	.word	0x08003ef7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f9d0 	bl	80041e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0208 	orr.w	r2, r2, #8
 8003e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0204 	bic.w	r2, r2, #4
 8003e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6999      	ldr	r1, [r3, #24]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	619a      	str	r2, [r3, #24]
      break;
 8003e72:	e064      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fa16 	bl	80042ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6999      	ldr	r1, [r3, #24]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	619a      	str	r2, [r3, #24]
      break;
 8003eb4:	e043      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fa61 	bl	8004384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0208 	orr.w	r2, r2, #8
 8003ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0204 	bic.w	r2, r2, #4
 8003ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69d9      	ldr	r1, [r3, #28]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	61da      	str	r2, [r3, #28]
      break;
 8003ef4:	e023      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 faab 	bl	8004458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69d9      	ldr	r1, [r3, #28]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	021a      	lsls	r2, r3, #8
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	61da      	str	r2, [r3, #28]
      break;
 8003f36:	e002      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_TIM_ConfigClockSource+0x1c>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e0b4      	b.n	80040d6 <HAL_TIM_ConfigClockSource+0x186>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa4:	d03e      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0xd4>
 8003fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003faa:	f200 8087 	bhi.w	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	f000 8086 	beq.w	80040c2 <HAL_TIM_ConfigClockSource+0x172>
 8003fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fba:	d87f      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fbc:	2b70      	cmp	r3, #112	; 0x70
 8003fbe:	d01a      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0xa6>
 8003fc0:	2b70      	cmp	r3, #112	; 0x70
 8003fc2:	d87b      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fc4:	2b60      	cmp	r3, #96	; 0x60
 8003fc6:	d050      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x11a>
 8003fc8:	2b60      	cmp	r3, #96	; 0x60
 8003fca:	d877      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b50      	cmp	r3, #80	; 0x50
 8003fce:	d03c      	beq.n	800404a <HAL_TIM_ConfigClockSource+0xfa>
 8003fd0:	2b50      	cmp	r3, #80	; 0x50
 8003fd2:	d873      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d058      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x13a>
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d86f      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b30      	cmp	r3, #48	; 0x30
 8003fde:	d064      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x15a>
 8003fe0:	2b30      	cmp	r3, #48	; 0x30
 8003fe2:	d86b      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d060      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x15a>
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d867      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d05c      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x15a>
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d05a      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x15a>
 8003ff4:	e062      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6899      	ldr	r1, [r3, #8]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f000 faf1 	bl	80045ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	609a      	str	r2, [r3, #8]
      break;
 8004022:	e04f      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f000 fada 	bl	80045ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004046:	609a      	str	r2, [r3, #8]
      break;
 8004048:	e03c      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	461a      	mov	r2, r3
 8004058:	f000 fa4e 	bl	80044f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2150      	movs	r1, #80	; 0x50
 8004062:	4618      	mov	r0, r3
 8004064:	f000 faa7 	bl	80045b6 <TIM_ITRx_SetConfig>
      break;
 8004068:	e02c      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	461a      	mov	r2, r3
 8004078:	f000 fa6d 	bl	8004556 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2160      	movs	r1, #96	; 0x60
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fa97 	bl	80045b6 <TIM_ITRx_SetConfig>
      break;
 8004088:	e01c      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	461a      	mov	r2, r3
 8004098:	f000 fa2e 	bl	80044f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2140      	movs	r1, #64	; 0x40
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fa87 	bl	80045b6 <TIM_ITRx_SetConfig>
      break;
 80040a8:	e00c      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f000 fa7e 	bl	80045b6 <TIM_ITRx_SetConfig>
      break;
 80040ba:	e003      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
      break;
 80040c0:	e000      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a34      	ldr	r2, [pc, #208]	; (80041c4 <TIM_Base_SetConfig+0xe4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00f      	beq.n	8004118 <TIM_Base_SetConfig+0x38>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fe:	d00b      	beq.n	8004118 <TIM_Base_SetConfig+0x38>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a31      	ldr	r2, [pc, #196]	; (80041c8 <TIM_Base_SetConfig+0xe8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <TIM_Base_SetConfig+0x38>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a30      	ldr	r2, [pc, #192]	; (80041cc <TIM_Base_SetConfig+0xec>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_Base_SetConfig+0x38>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a2f      	ldr	r2, [pc, #188]	; (80041d0 <TIM_Base_SetConfig+0xf0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d108      	bne.n	800412a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <TIM_Base_SetConfig+0xe4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01b      	beq.n	800416a <TIM_Base_SetConfig+0x8a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d017      	beq.n	800416a <TIM_Base_SetConfig+0x8a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a22      	ldr	r2, [pc, #136]	; (80041c8 <TIM_Base_SetConfig+0xe8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <TIM_Base_SetConfig+0x8a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a21      	ldr	r2, [pc, #132]	; (80041cc <TIM_Base_SetConfig+0xec>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00f      	beq.n	800416a <TIM_Base_SetConfig+0x8a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <TIM_Base_SetConfig+0xf0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00b      	beq.n	800416a <TIM_Base_SetConfig+0x8a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <TIM_Base_SetConfig+0xf4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d007      	beq.n	800416a <TIM_Base_SetConfig+0x8a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1e      	ldr	r2, [pc, #120]	; (80041d8 <TIM_Base_SetConfig+0xf8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d003      	beq.n	800416a <TIM_Base_SetConfig+0x8a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <TIM_Base_SetConfig+0xfc>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d108      	bne.n	800417c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <TIM_Base_SetConfig+0xe4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d103      	bne.n	80041b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	615a      	str	r2, [r3, #20]
}
 80041b6:	bf00      	nop
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800

080041e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 0302 	bic.w	r3, r3, #2
 8004228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <TIM_OC1_SetConfig+0xc8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d10c      	bne.n	8004256 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0308 	bic.w	r3, r3, #8
 8004242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 0304 	bic.w	r3, r3, #4
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <TIM_OC1_SetConfig+0xc8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d111      	bne.n	8004282 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	621a      	str	r2, [r3, #32]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40010000 	.word	0x40010000

080042ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0210 	bic.w	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0320 	bic.w	r3, r3, #32
 80042f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <TIM_OC2_SetConfig+0xd4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d10d      	bne.n	8004328 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004326:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a15      	ldr	r2, [pc, #84]	; (8004380 <TIM_OC2_SetConfig+0xd4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d113      	bne.n	8004358 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800433e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40010000 	.word	0x40010000

08004384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <TIM_OC3_SetConfig+0xd0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10d      	bne.n	80043fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <TIM_OC3_SetConfig+0xd0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d113      	bne.n	800442e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800440c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40010000 	.word	0x40010000

08004458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	031b      	lsls	r3, r3, #12
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <TIM_OC4_SetConfig+0x9c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d109      	bne.n	80044cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	019b      	lsls	r3, r3, #6
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40010000 	.word	0x40010000

080044f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 0201 	bic.w	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f023 030a 	bic.w	r3, r3, #10
 8004534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004556:	b480      	push	{r7}
 8004558:	b087      	sub	sp, #28
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f023 0210 	bic.w	r2, r3, #16
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004580:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	031b      	lsls	r3, r3, #12
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004592:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f043 0307 	orr.w	r3, r3, #7
 80045d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	609a      	str	r2, [r3, #8]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	021a      	lsls	r2, r3, #8
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	431a      	orrs	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4313      	orrs	r3, r2
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	609a      	str	r2, [r3, #8]
}
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	2201      	movs	r2, #1
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1a      	ldr	r2, [r3, #32]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	43db      	mvns	r3, r3
 800464e:	401a      	ands	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a1a      	ldr	r2, [r3, #32]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	fa01 f303 	lsl.w	r3, r1, r3
 8004664:	431a      	orrs	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800468c:	2302      	movs	r3, #2
 800468e:	e050      	b.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d013      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a18      	ldr	r2, [pc, #96]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a15      	ldr	r2, [pc, #84]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10c      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40014000 	.word	0x40014000

08004754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800476c:	2302      	movs	r3, #2
 800476e:	e03d      	b.n	80047ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e03f      	b.n	800488a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fd f998 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800483a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f829 	bl	8004894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004898:	b0c0      	sub	sp, #256	; 0x100
 800489a:	af00      	add	r7, sp, #0
 800489c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b0:	68d9      	ldr	r1, [r3, #12]
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	ea40 0301 	orr.w	r3, r0, r1
 80048bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048ec:	f021 010c 	bic.w	r1, r1, #12
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048fa:	430b      	orrs	r3, r1
 80048fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490e:	6999      	ldr	r1, [r3, #24]
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	ea40 0301 	orr.w	r3, r0, r1
 800491a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b8f      	ldr	r3, [pc, #572]	; (8004b60 <UART_SetConfig+0x2cc>)
 8004924:	429a      	cmp	r2, r3
 8004926:	d005      	beq.n	8004934 <UART_SetConfig+0xa0>
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b8d      	ldr	r3, [pc, #564]	; (8004b64 <UART_SetConfig+0x2d0>)
 8004930:	429a      	cmp	r2, r3
 8004932:	d104      	bne.n	800493e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004934:	f7ff f8de 	bl	8003af4 <HAL_RCC_GetPCLK2Freq>
 8004938:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800493c:	e003      	b.n	8004946 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800493e:	f7ff f8c5 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8004942:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004950:	f040 810c 	bne.w	8004b6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004958:	2200      	movs	r2, #0
 800495a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800495e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004962:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004966:	4622      	mov	r2, r4
 8004968:	462b      	mov	r3, r5
 800496a:	1891      	adds	r1, r2, r2
 800496c:	65b9      	str	r1, [r7, #88]	; 0x58
 800496e:	415b      	adcs	r3, r3
 8004970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004972:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004976:	4621      	mov	r1, r4
 8004978:	eb12 0801 	adds.w	r8, r2, r1
 800497c:	4629      	mov	r1, r5
 800497e:	eb43 0901 	adc.w	r9, r3, r1
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800498e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004996:	4690      	mov	r8, r2
 8004998:	4699      	mov	r9, r3
 800499a:	4623      	mov	r3, r4
 800499c:	eb18 0303 	adds.w	r3, r8, r3
 80049a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049a4:	462b      	mov	r3, r5
 80049a6:	eb49 0303 	adc.w	r3, r9, r3
 80049aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049c2:	460b      	mov	r3, r1
 80049c4:	18db      	adds	r3, r3, r3
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
 80049c8:	4613      	mov	r3, r2
 80049ca:	eb42 0303 	adc.w	r3, r2, r3
 80049ce:	657b      	str	r3, [r7, #84]	; 0x54
 80049d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049d8:	f7fc f86a 	bl	8000ab0 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4b61      	ldr	r3, [pc, #388]	; (8004b68 <UART_SetConfig+0x2d4>)
 80049e2:	fba3 2302 	umull	r2, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	011c      	lsls	r4, r3, #4
 80049ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	1891      	adds	r1, r2, r2
 8004a02:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a04:	415b      	adcs	r3, r3
 8004a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a12:	4649      	mov	r1, r9
 8004a14:	eb43 0b01 	adc.w	fp, r3, r1
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a2c:	4692      	mov	sl, r2
 8004a2e:	469b      	mov	fp, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	eb1a 0303 	adds.w	r3, sl, r3
 8004a36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	18db      	adds	r3, r3, r3
 8004a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a5e:	4613      	mov	r3, r2
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
 8004a66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a6e:	f7fc f81f 	bl	8000ab0 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4611      	mov	r1, r2
 8004a78:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <UART_SetConfig+0x2d4>)
 8004a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	2264      	movs	r2, #100	; 0x64
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	1acb      	subs	r3, r1, r3
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a8e:	4b36      	ldr	r3, [pc, #216]	; (8004b68 <UART_SetConfig+0x2d4>)
 8004a90:	fba3 2302 	umull	r2, r3, r3, r2
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a9c:	441c      	add	r4, r3
 8004a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aa8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004aac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	1891      	adds	r1, r2, r2
 8004ab6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004abc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	1851      	adds	r1, r2, r1
 8004ac4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	414b      	adcs	r3, r1
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ad8:	4659      	mov	r1, fp
 8004ada:	00cb      	lsls	r3, r1, #3
 8004adc:	4651      	mov	r1, sl
 8004ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	00ca      	lsls	r2, r1, #3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	4642      	mov	r2, r8
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004af4:	464b      	mov	r3, r9
 8004af6:	460a      	mov	r2, r1
 8004af8:	eb42 0303 	adc.w	r3, r2, r3
 8004afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b14:	460b      	mov	r3, r1
 8004b16:	18db      	adds	r3, r3, r3
 8004b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	eb42 0303 	adc.w	r3, r2, r3
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b2a:	f7fb ffc1 	bl	8000ab0 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <UART_SetConfig+0x2d4>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	2164      	movs	r1, #100	; 0x64
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	3332      	adds	r3, #50	; 0x32
 8004b46:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <UART_SetConfig+0x2d4>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f003 0207 	and.w	r2, r3, #7
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4422      	add	r2, r4
 8004b5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b5c:	e105      	b.n	8004d6a <UART_SetConfig+0x4d6>
 8004b5e:	bf00      	nop
 8004b60:	40011000 	.word	0x40011000
 8004b64:	40011400 	.word	0x40011400
 8004b68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b7e:	4642      	mov	r2, r8
 8004b80:	464b      	mov	r3, r9
 8004b82:	1891      	adds	r1, r2, r2
 8004b84:	6239      	str	r1, [r7, #32]
 8004b86:	415b      	adcs	r3, r3
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b8e:	4641      	mov	r1, r8
 8004b90:	1854      	adds	r4, r2, r1
 8004b92:	4649      	mov	r1, r9
 8004b94:	eb43 0501 	adc.w	r5, r3, r1
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	00eb      	lsls	r3, r5, #3
 8004ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba6:	00e2      	lsls	r2, r4, #3
 8004ba8:	4614      	mov	r4, r2
 8004baa:	461d      	mov	r5, r3
 8004bac:	4643      	mov	r3, r8
 8004bae:	18e3      	adds	r3, r4, r3
 8004bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	eb45 0303 	adc.w	r3, r5, r3
 8004bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bda:	4629      	mov	r1, r5
 8004bdc:	008b      	lsls	r3, r1, #2
 8004bde:	4621      	mov	r1, r4
 8004be0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be4:	4621      	mov	r1, r4
 8004be6:	008a      	lsls	r2, r1, #2
 8004be8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bec:	f7fb ff60 	bl	8000ab0 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4b60      	ldr	r3, [pc, #384]	; (8004d78 <UART_SetConfig+0x4e4>)
 8004bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	011c      	lsls	r4, r3, #4
 8004bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c10:	4642      	mov	r2, r8
 8004c12:	464b      	mov	r3, r9
 8004c14:	1891      	adds	r1, r2, r2
 8004c16:	61b9      	str	r1, [r7, #24]
 8004c18:	415b      	adcs	r3, r3
 8004c1a:	61fb      	str	r3, [r7, #28]
 8004c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c20:	4641      	mov	r1, r8
 8004c22:	1851      	adds	r1, r2, r1
 8004c24:	6139      	str	r1, [r7, #16]
 8004c26:	4649      	mov	r1, r9
 8004c28:	414b      	adcs	r3, r1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c38:	4659      	mov	r1, fp
 8004c3a:	00cb      	lsls	r3, r1, #3
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c42:	4651      	mov	r1, sl
 8004c44:	00ca      	lsls	r2, r1, #3
 8004c46:	4610      	mov	r0, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	189b      	adds	r3, r3, r2
 8004c50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c54:	464b      	mov	r3, r9
 8004c56:	460a      	mov	r2, r1
 8004c58:	eb42 0303 	adc.w	r3, r2, r3
 8004c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c78:	4649      	mov	r1, r9
 8004c7a:	008b      	lsls	r3, r1, #2
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c82:	4641      	mov	r1, r8
 8004c84:	008a      	lsls	r2, r1, #2
 8004c86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c8a:	f7fb ff11 	bl	8000ab0 <__aeabi_uldivmod>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <UART_SetConfig+0x4e4>)
 8004c94:	fba3 1302 	umull	r1, r3, r3, r2
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	2164      	movs	r1, #100	; 0x64
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	3332      	adds	r3, #50	; 0x32
 8004ca6:	4a34      	ldr	r2, [pc, #208]	; (8004d78 <UART_SetConfig+0x4e4>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb2:	441c      	add	r4, r3
 8004cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb8:	2200      	movs	r2, #0
 8004cba:	673b      	str	r3, [r7, #112]	; 0x70
 8004cbc:	677a      	str	r2, [r7, #116]	; 0x74
 8004cbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cc2:	4642      	mov	r2, r8
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	1891      	adds	r1, r2, r2
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd2:	4641      	mov	r1, r8
 8004cd4:	1851      	adds	r1, r2, r1
 8004cd6:	6039      	str	r1, [r7, #0]
 8004cd8:	4649      	mov	r1, r9
 8004cda:	414b      	adcs	r3, r1
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cea:	4659      	mov	r1, fp
 8004cec:	00cb      	lsls	r3, r1, #3
 8004cee:	4651      	mov	r1, sl
 8004cf0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	00ca      	lsls	r2, r1, #3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4642      	mov	r2, r8
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d04:	464b      	mov	r3, r9
 8004d06:	460a      	mov	r2, r1
 8004d08:	eb42 0303 	adc.w	r3, r2, r3
 8004d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	663b      	str	r3, [r7, #96]	; 0x60
 8004d18:	667a      	str	r2, [r7, #100]	; 0x64
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d26:	4649      	mov	r1, r9
 8004d28:	008b      	lsls	r3, r1, #2
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d30:	4641      	mov	r1, r8
 8004d32:	008a      	lsls	r2, r1, #2
 8004d34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d38:	f7fb feba 	bl	8000ab0 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <UART_SetConfig+0x4e4>)
 8004d42:	fba3 1302 	umull	r1, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2164      	movs	r1, #100	; 0x64
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	; 0x32
 8004d54:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <UART_SetConfig+0x4e4>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4422      	add	r2, r4
 8004d68:	609a      	str	r2, [r3, #8]
}
 8004d6a:	bf00      	nop
 8004d6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d76:	bf00      	nop
 8004d78:	51eb851f 	.word	0x51eb851f

08004d7c <__errno>:
 8004d7c:	4b01      	ldr	r3, [pc, #4]	; (8004d84 <__errno+0x8>)
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	2000009c 	.word	0x2000009c

08004d88 <__libc_init_array>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	4d0d      	ldr	r5, [pc, #52]	; (8004dc0 <__libc_init_array+0x38>)
 8004d8c:	4c0d      	ldr	r4, [pc, #52]	; (8004dc4 <__libc_init_array+0x3c>)
 8004d8e:	1b64      	subs	r4, r4, r5
 8004d90:	10a4      	asrs	r4, r4, #2
 8004d92:	2600      	movs	r6, #0
 8004d94:	42a6      	cmp	r6, r4
 8004d96:	d109      	bne.n	8004dac <__libc_init_array+0x24>
 8004d98:	4d0b      	ldr	r5, [pc, #44]	; (8004dc8 <__libc_init_array+0x40>)
 8004d9a:	4c0c      	ldr	r4, [pc, #48]	; (8004dcc <__libc_init_array+0x44>)
 8004d9c:	f000 fb74 	bl	8005488 <_init>
 8004da0:	1b64      	subs	r4, r4, r5
 8004da2:	10a4      	asrs	r4, r4, #2
 8004da4:	2600      	movs	r6, #0
 8004da6:	42a6      	cmp	r6, r4
 8004da8:	d105      	bne.n	8004db6 <__libc_init_array+0x2e>
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db0:	4798      	blx	r3
 8004db2:	3601      	adds	r6, #1
 8004db4:	e7ee      	b.n	8004d94 <__libc_init_array+0xc>
 8004db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dba:	4798      	blx	r3
 8004dbc:	3601      	adds	r6, #1
 8004dbe:	e7f2      	b.n	8004da6 <__libc_init_array+0x1e>
 8004dc0:	08005530 	.word	0x08005530
 8004dc4:	08005530 	.word	0x08005530
 8004dc8:	08005530 	.word	0x08005530
 8004dcc:	08005534 	.word	0x08005534

08004dd0 <memset>:
 8004dd0:	4402      	add	r2, r0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d100      	bne.n	8004dda <memset+0xa>
 8004dd8:	4770      	bx	lr
 8004dda:	f803 1b01 	strb.w	r1, [r3], #1
 8004dde:	e7f9      	b.n	8004dd4 <memset+0x4>

08004de0 <atan>:
 8004de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de4:	ec55 4b10 	vmov	r4, r5, d0
 8004de8:	4bc3      	ldr	r3, [pc, #780]	; (80050f8 <atan+0x318>)
 8004dea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004dee:	429e      	cmp	r6, r3
 8004df0:	46ab      	mov	fp, r5
 8004df2:	dd18      	ble.n	8004e26 <atan+0x46>
 8004df4:	4bc1      	ldr	r3, [pc, #772]	; (80050fc <atan+0x31c>)
 8004df6:	429e      	cmp	r6, r3
 8004df8:	dc01      	bgt.n	8004dfe <atan+0x1e>
 8004dfa:	d109      	bne.n	8004e10 <atan+0x30>
 8004dfc:	b144      	cbz	r4, 8004e10 <atan+0x30>
 8004dfe:	4622      	mov	r2, r4
 8004e00:	462b      	mov	r3, r5
 8004e02:	4620      	mov	r0, r4
 8004e04:	4629      	mov	r1, r5
 8004e06:	f7fb f9ed 	bl	80001e4 <__adddf3>
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	e006      	b.n	8004e1e <atan+0x3e>
 8004e10:	f1bb 0f00 	cmp.w	fp, #0
 8004e14:	f300 8131 	bgt.w	800507a <atan+0x29a>
 8004e18:	a59b      	add	r5, pc, #620	; (adr r5, 8005088 <atan+0x2a8>)
 8004e1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004e1e:	ec45 4b10 	vmov	d0, r4, r5
 8004e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e26:	4bb6      	ldr	r3, [pc, #728]	; (8005100 <atan+0x320>)
 8004e28:	429e      	cmp	r6, r3
 8004e2a:	dc14      	bgt.n	8004e56 <atan+0x76>
 8004e2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004e30:	429e      	cmp	r6, r3
 8004e32:	dc0d      	bgt.n	8004e50 <atan+0x70>
 8004e34:	a396      	add	r3, pc, #600	; (adr r3, 8005090 <atan+0x2b0>)
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	ee10 0a10 	vmov	r0, s0
 8004e3e:	4629      	mov	r1, r5
 8004e40:	f7fb f9d0 	bl	80001e4 <__adddf3>
 8004e44:	4baf      	ldr	r3, [pc, #700]	; (8005104 <atan+0x324>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	f7fb fe12 	bl	8000a70 <__aeabi_dcmpgt>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d1e6      	bne.n	8004e1e <atan+0x3e>
 8004e50:	f04f 3aff 	mov.w	sl, #4294967295
 8004e54:	e02b      	b.n	8004eae <atan+0xce>
 8004e56:	f000 f963 	bl	8005120 <fabs>
 8004e5a:	4bab      	ldr	r3, [pc, #684]	; (8005108 <atan+0x328>)
 8004e5c:	429e      	cmp	r6, r3
 8004e5e:	ec55 4b10 	vmov	r4, r5, d0
 8004e62:	f300 80bf 	bgt.w	8004fe4 <atan+0x204>
 8004e66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004e6a:	429e      	cmp	r6, r3
 8004e6c:	f300 80a0 	bgt.w	8004fb0 <atan+0x1d0>
 8004e70:	ee10 2a10 	vmov	r2, s0
 8004e74:	ee10 0a10 	vmov	r0, s0
 8004e78:	462b      	mov	r3, r5
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	f7fb f9b2 	bl	80001e4 <__adddf3>
 8004e80:	4ba0      	ldr	r3, [pc, #640]	; (8005104 <atan+0x324>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	f7fb f9ac 	bl	80001e0 <__aeabi_dsub>
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460f      	mov	r7, r1
 8004e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e92:	4620      	mov	r0, r4
 8004e94:	4629      	mov	r1, r5
 8004e96:	f7fb f9a5 	bl	80001e4 <__adddf3>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	4639      	mov	r1, r7
 8004ea2:	f7fb fc7f 	bl	80007a4 <__aeabi_ddiv>
 8004ea6:	f04f 0a00 	mov.w	sl, #0
 8004eaa:	4604      	mov	r4, r0
 8004eac:	460d      	mov	r5, r1
 8004eae:	4622      	mov	r2, r4
 8004eb0:	462b      	mov	r3, r5
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	f7fb fb4b 	bl	8000550 <__aeabi_dmul>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	4689      	mov	r9, r1
 8004ec2:	f7fb fb45 	bl	8000550 <__aeabi_dmul>
 8004ec6:	a374      	add	r3, pc, #464	; (adr r3, 8005098 <atan+0x2b8>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	4606      	mov	r6, r0
 8004ece:	460f      	mov	r7, r1
 8004ed0:	f7fb fb3e 	bl	8000550 <__aeabi_dmul>
 8004ed4:	a372      	add	r3, pc, #456	; (adr r3, 80050a0 <atan+0x2c0>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f7fb f983 	bl	80001e4 <__adddf3>
 8004ede:	4632      	mov	r2, r6
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	f7fb fb35 	bl	8000550 <__aeabi_dmul>
 8004ee6:	a370      	add	r3, pc, #448	; (adr r3, 80050a8 <atan+0x2c8>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb f97a 	bl	80001e4 <__adddf3>
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	f7fb fb2c 	bl	8000550 <__aeabi_dmul>
 8004ef8:	a36d      	add	r3, pc, #436	; (adr r3, 80050b0 <atan+0x2d0>)
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f7fb f971 	bl	80001e4 <__adddf3>
 8004f02:	4632      	mov	r2, r6
 8004f04:	463b      	mov	r3, r7
 8004f06:	f7fb fb23 	bl	8000550 <__aeabi_dmul>
 8004f0a:	a36b      	add	r3, pc, #428	; (adr r3, 80050b8 <atan+0x2d8>)
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	f7fb f968 	bl	80001e4 <__adddf3>
 8004f14:	4632      	mov	r2, r6
 8004f16:	463b      	mov	r3, r7
 8004f18:	f7fb fb1a 	bl	8000550 <__aeabi_dmul>
 8004f1c:	a368      	add	r3, pc, #416	; (adr r3, 80050c0 <atan+0x2e0>)
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f7fb f95f 	bl	80001e4 <__adddf3>
 8004f26:	4642      	mov	r2, r8
 8004f28:	464b      	mov	r3, r9
 8004f2a:	f7fb fb11 	bl	8000550 <__aeabi_dmul>
 8004f2e:	a366      	add	r3, pc, #408	; (adr r3, 80050c8 <atan+0x2e8>)
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	4680      	mov	r8, r0
 8004f36:	4689      	mov	r9, r1
 8004f38:	4630      	mov	r0, r6
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	f7fb fb08 	bl	8000550 <__aeabi_dmul>
 8004f40:	a363      	add	r3, pc, #396	; (adr r3, 80050d0 <atan+0x2f0>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f7fb f94b 	bl	80001e0 <__aeabi_dsub>
 8004f4a:	4632      	mov	r2, r6
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	f7fb faff 	bl	8000550 <__aeabi_dmul>
 8004f52:	a361      	add	r3, pc, #388	; (adr r3, 80050d8 <atan+0x2f8>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f7fb f942 	bl	80001e0 <__aeabi_dsub>
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	463b      	mov	r3, r7
 8004f60:	f7fb faf6 	bl	8000550 <__aeabi_dmul>
 8004f64:	a35e      	add	r3, pc, #376	; (adr r3, 80050e0 <atan+0x300>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb f939 	bl	80001e0 <__aeabi_dsub>
 8004f6e:	4632      	mov	r2, r6
 8004f70:	463b      	mov	r3, r7
 8004f72:	f7fb faed 	bl	8000550 <__aeabi_dmul>
 8004f76:	a35c      	add	r3, pc, #368	; (adr r3, 80050e8 <atan+0x308>)
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f7fb f930 	bl	80001e0 <__aeabi_dsub>
 8004f80:	4632      	mov	r2, r6
 8004f82:	463b      	mov	r3, r7
 8004f84:	f7fb fae4 	bl	8000550 <__aeabi_dmul>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	4649      	mov	r1, r9
 8004f90:	f7fb f928 	bl	80001e4 <__adddf3>
 8004f94:	4622      	mov	r2, r4
 8004f96:	462b      	mov	r3, r5
 8004f98:	f7fb fada 	bl	8000550 <__aeabi_dmul>
 8004f9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	d14b      	bne.n	800503e <atan+0x25e>
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb f919 	bl	80001e0 <__aeabi_dsub>
 8004fae:	e72c      	b.n	8004e0a <atan+0x2a>
 8004fb0:	ee10 0a10 	vmov	r0, s0
 8004fb4:	4b53      	ldr	r3, [pc, #332]	; (8005104 <atan+0x324>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	4629      	mov	r1, r5
 8004fba:	f7fb f911 	bl	80001e0 <__aeabi_dsub>
 8004fbe:	4b51      	ldr	r3, [pc, #324]	; (8005104 <atan+0x324>)
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	4629      	mov	r1, r5
 8004fca:	f7fb f90b 	bl	80001e4 <__adddf3>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	f7fb fbe5 	bl	80007a4 <__aeabi_ddiv>
 8004fda:	f04f 0a01 	mov.w	sl, #1
 8004fde:	4604      	mov	r4, r0
 8004fe0:	460d      	mov	r5, r1
 8004fe2:	e764      	b.n	8004eae <atan+0xce>
 8004fe4:	4b49      	ldr	r3, [pc, #292]	; (800510c <atan+0x32c>)
 8004fe6:	429e      	cmp	r6, r3
 8004fe8:	da1d      	bge.n	8005026 <atan+0x246>
 8004fea:	ee10 0a10 	vmov	r0, s0
 8004fee:	4b48      	ldr	r3, [pc, #288]	; (8005110 <atan+0x330>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	f7fb f8f4 	bl	80001e0 <__aeabi_dsub>
 8004ff8:	4b45      	ldr	r3, [pc, #276]	; (8005110 <atan+0x330>)
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	460f      	mov	r7, r1
 8004ffe:	2200      	movs	r2, #0
 8005000:	4620      	mov	r0, r4
 8005002:	4629      	mov	r1, r5
 8005004:	f7fb faa4 	bl	8000550 <__aeabi_dmul>
 8005008:	4b3e      	ldr	r3, [pc, #248]	; (8005104 <atan+0x324>)
 800500a:	2200      	movs	r2, #0
 800500c:	f7fb f8ea 	bl	80001e4 <__adddf3>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4630      	mov	r0, r6
 8005016:	4639      	mov	r1, r7
 8005018:	f7fb fbc4 	bl	80007a4 <__aeabi_ddiv>
 800501c:	f04f 0a02 	mov.w	sl, #2
 8005020:	4604      	mov	r4, r0
 8005022:	460d      	mov	r5, r1
 8005024:	e743      	b.n	8004eae <atan+0xce>
 8005026:	462b      	mov	r3, r5
 8005028:	ee10 2a10 	vmov	r2, s0
 800502c:	4939      	ldr	r1, [pc, #228]	; (8005114 <atan+0x334>)
 800502e:	2000      	movs	r0, #0
 8005030:	f7fb fbb8 	bl	80007a4 <__aeabi_ddiv>
 8005034:	f04f 0a03 	mov.w	sl, #3
 8005038:	4604      	mov	r4, r0
 800503a:	460d      	mov	r5, r1
 800503c:	e737      	b.n	8004eae <atan+0xce>
 800503e:	4b36      	ldr	r3, [pc, #216]	; (8005118 <atan+0x338>)
 8005040:	4e36      	ldr	r6, [pc, #216]	; (800511c <atan+0x33c>)
 8005042:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005046:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800504a:	e9da 2300 	ldrd	r2, r3, [sl]
 800504e:	f7fb f8c7 	bl	80001e0 <__aeabi_dsub>
 8005052:	4622      	mov	r2, r4
 8005054:	462b      	mov	r3, r5
 8005056:	f7fb f8c3 	bl	80001e0 <__aeabi_dsub>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005062:	f7fb f8bd 	bl	80001e0 <__aeabi_dsub>
 8005066:	f1bb 0f00 	cmp.w	fp, #0
 800506a:	4604      	mov	r4, r0
 800506c:	460d      	mov	r5, r1
 800506e:	f6bf aed6 	bge.w	8004e1e <atan+0x3e>
 8005072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005076:	461d      	mov	r5, r3
 8005078:	e6d1      	b.n	8004e1e <atan+0x3e>
 800507a:	a51d      	add	r5, pc, #116	; (adr r5, 80050f0 <atan+0x310>)
 800507c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005080:	e6cd      	b.n	8004e1e <atan+0x3e>
 8005082:	bf00      	nop
 8005084:	f3af 8000 	nop.w
 8005088:	54442d18 	.word	0x54442d18
 800508c:	bff921fb 	.word	0xbff921fb
 8005090:	8800759c 	.word	0x8800759c
 8005094:	7e37e43c 	.word	0x7e37e43c
 8005098:	e322da11 	.word	0xe322da11
 800509c:	3f90ad3a 	.word	0x3f90ad3a
 80050a0:	24760deb 	.word	0x24760deb
 80050a4:	3fa97b4b 	.word	0x3fa97b4b
 80050a8:	a0d03d51 	.word	0xa0d03d51
 80050ac:	3fb10d66 	.word	0x3fb10d66
 80050b0:	c54c206e 	.word	0xc54c206e
 80050b4:	3fb745cd 	.word	0x3fb745cd
 80050b8:	920083ff 	.word	0x920083ff
 80050bc:	3fc24924 	.word	0x3fc24924
 80050c0:	5555550d 	.word	0x5555550d
 80050c4:	3fd55555 	.word	0x3fd55555
 80050c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80050cc:	bfa2b444 	.word	0xbfa2b444
 80050d0:	52defd9a 	.word	0x52defd9a
 80050d4:	3fadde2d 	.word	0x3fadde2d
 80050d8:	af749a6d 	.word	0xaf749a6d
 80050dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80050e0:	fe231671 	.word	0xfe231671
 80050e4:	3fbc71c6 	.word	0x3fbc71c6
 80050e8:	9998ebc4 	.word	0x9998ebc4
 80050ec:	3fc99999 	.word	0x3fc99999
 80050f0:	54442d18 	.word	0x54442d18
 80050f4:	3ff921fb 	.word	0x3ff921fb
 80050f8:	440fffff 	.word	0x440fffff
 80050fc:	7ff00000 	.word	0x7ff00000
 8005100:	3fdbffff 	.word	0x3fdbffff
 8005104:	3ff00000 	.word	0x3ff00000
 8005108:	3ff2ffff 	.word	0x3ff2ffff
 800510c:	40038000 	.word	0x40038000
 8005110:	3ff80000 	.word	0x3ff80000
 8005114:	bff00000 	.word	0xbff00000
 8005118:	080054d8 	.word	0x080054d8
 800511c:	080054b8 	.word	0x080054b8

08005120 <fabs>:
 8005120:	ec51 0b10 	vmov	r0, r1, d0
 8005124:	ee10 2a10 	vmov	r2, s0
 8005128:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800512c:	ec43 2b10 	vmov	d0, r2, r3
 8005130:	4770      	bx	lr

08005132 <atan2>:
 8005132:	f000 b82d 	b.w	8005190 <__ieee754_atan2>

08005136 <sqrt>:
 8005136:	b538      	push	{r3, r4, r5, lr}
 8005138:	ed2d 8b02 	vpush	{d8}
 800513c:	ec55 4b10 	vmov	r4, r5, d0
 8005140:	f000 f8f0 	bl	8005324 <__ieee754_sqrt>
 8005144:	4622      	mov	r2, r4
 8005146:	462b      	mov	r3, r5
 8005148:	4620      	mov	r0, r4
 800514a:	4629      	mov	r1, r5
 800514c:	eeb0 8a40 	vmov.f32	s16, s0
 8005150:	eef0 8a60 	vmov.f32	s17, s1
 8005154:	f7fb fc96 	bl	8000a84 <__aeabi_dcmpun>
 8005158:	b990      	cbnz	r0, 8005180 <sqrt+0x4a>
 800515a:	2200      	movs	r2, #0
 800515c:	2300      	movs	r3, #0
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	f7fb fc67 	bl	8000a34 <__aeabi_dcmplt>
 8005166:	b158      	cbz	r0, 8005180 <sqrt+0x4a>
 8005168:	f7ff fe08 	bl	8004d7c <__errno>
 800516c:	2321      	movs	r3, #33	; 0x21
 800516e:	6003      	str	r3, [r0, #0]
 8005170:	2200      	movs	r2, #0
 8005172:	2300      	movs	r3, #0
 8005174:	4610      	mov	r0, r2
 8005176:	4619      	mov	r1, r3
 8005178:	f7fb fb14 	bl	80007a4 <__aeabi_ddiv>
 800517c:	ec41 0b18 	vmov	d8, r0, r1
 8005180:	eeb0 0a48 	vmov.f32	s0, s16
 8005184:	eef0 0a68 	vmov.f32	s1, s17
 8005188:	ecbd 8b02 	vpop	{d8}
 800518c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005190 <__ieee754_atan2>:
 8005190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005194:	ec57 6b11 	vmov	r6, r7, d1
 8005198:	4273      	negs	r3, r6
 800519a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005320 <__ieee754_atan2+0x190>
 800519e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80051a2:	4333      	orrs	r3, r6
 80051a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80051a8:	4573      	cmp	r3, lr
 80051aa:	ec51 0b10 	vmov	r0, r1, d0
 80051ae:	ee11 8a10 	vmov	r8, s2
 80051b2:	d80a      	bhi.n	80051ca <__ieee754_atan2+0x3a>
 80051b4:	4244      	negs	r4, r0
 80051b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80051ba:	4304      	orrs	r4, r0
 80051bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80051c0:	4574      	cmp	r4, lr
 80051c2:	ee10 9a10 	vmov	r9, s0
 80051c6:	468c      	mov	ip, r1
 80051c8:	d907      	bls.n	80051da <__ieee754_atan2+0x4a>
 80051ca:	4632      	mov	r2, r6
 80051cc:	463b      	mov	r3, r7
 80051ce:	f7fb f809 	bl	80001e4 <__adddf3>
 80051d2:	ec41 0b10 	vmov	d0, r0, r1
 80051d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80051de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80051e2:	4334      	orrs	r4, r6
 80051e4:	d103      	bne.n	80051ee <__ieee754_atan2+0x5e>
 80051e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051ea:	f7ff bdf9 	b.w	8004de0 <atan>
 80051ee:	17bc      	asrs	r4, r7, #30
 80051f0:	f004 0402 	and.w	r4, r4, #2
 80051f4:	ea53 0909 	orrs.w	r9, r3, r9
 80051f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80051fc:	d107      	bne.n	800520e <__ieee754_atan2+0x7e>
 80051fe:	2c02      	cmp	r4, #2
 8005200:	d060      	beq.n	80052c4 <__ieee754_atan2+0x134>
 8005202:	2c03      	cmp	r4, #3
 8005204:	d1e5      	bne.n	80051d2 <__ieee754_atan2+0x42>
 8005206:	a142      	add	r1, pc, #264	; (adr r1, 8005310 <__ieee754_atan2+0x180>)
 8005208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800520c:	e7e1      	b.n	80051d2 <__ieee754_atan2+0x42>
 800520e:	ea52 0808 	orrs.w	r8, r2, r8
 8005212:	d106      	bne.n	8005222 <__ieee754_atan2+0x92>
 8005214:	f1bc 0f00 	cmp.w	ip, #0
 8005218:	da5f      	bge.n	80052da <__ieee754_atan2+0x14a>
 800521a:	a13f      	add	r1, pc, #252	; (adr r1, 8005318 <__ieee754_atan2+0x188>)
 800521c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005220:	e7d7      	b.n	80051d2 <__ieee754_atan2+0x42>
 8005222:	4572      	cmp	r2, lr
 8005224:	d10f      	bne.n	8005246 <__ieee754_atan2+0xb6>
 8005226:	4293      	cmp	r3, r2
 8005228:	f104 34ff 	add.w	r4, r4, #4294967295
 800522c:	d107      	bne.n	800523e <__ieee754_atan2+0xae>
 800522e:	2c02      	cmp	r4, #2
 8005230:	d84c      	bhi.n	80052cc <__ieee754_atan2+0x13c>
 8005232:	4b35      	ldr	r3, [pc, #212]	; (8005308 <__ieee754_atan2+0x178>)
 8005234:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005238:	e9d4 0100 	ldrd	r0, r1, [r4]
 800523c:	e7c9      	b.n	80051d2 <__ieee754_atan2+0x42>
 800523e:	2c02      	cmp	r4, #2
 8005240:	d848      	bhi.n	80052d4 <__ieee754_atan2+0x144>
 8005242:	4b32      	ldr	r3, [pc, #200]	; (800530c <__ieee754_atan2+0x17c>)
 8005244:	e7f6      	b.n	8005234 <__ieee754_atan2+0xa4>
 8005246:	4573      	cmp	r3, lr
 8005248:	d0e4      	beq.n	8005214 <__ieee754_atan2+0x84>
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005250:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005254:	da1e      	bge.n	8005294 <__ieee754_atan2+0x104>
 8005256:	2f00      	cmp	r7, #0
 8005258:	da01      	bge.n	800525e <__ieee754_atan2+0xce>
 800525a:	323c      	adds	r2, #60	; 0x3c
 800525c:	db1e      	blt.n	800529c <__ieee754_atan2+0x10c>
 800525e:	4632      	mov	r2, r6
 8005260:	463b      	mov	r3, r7
 8005262:	f7fb fa9f 	bl	80007a4 <__aeabi_ddiv>
 8005266:	ec41 0b10 	vmov	d0, r0, r1
 800526a:	f7ff ff59 	bl	8005120 <fabs>
 800526e:	f7ff fdb7 	bl	8004de0 <atan>
 8005272:	ec51 0b10 	vmov	r0, r1, d0
 8005276:	2c01      	cmp	r4, #1
 8005278:	d013      	beq.n	80052a2 <__ieee754_atan2+0x112>
 800527a:	2c02      	cmp	r4, #2
 800527c:	d015      	beq.n	80052aa <__ieee754_atan2+0x11a>
 800527e:	2c00      	cmp	r4, #0
 8005280:	d0a7      	beq.n	80051d2 <__ieee754_atan2+0x42>
 8005282:	a319      	add	r3, pc, #100	; (adr r3, 80052e8 <__ieee754_atan2+0x158>)
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f7fa ffaa 	bl	80001e0 <__aeabi_dsub>
 800528c:	a318      	add	r3, pc, #96	; (adr r3, 80052f0 <__ieee754_atan2+0x160>)
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	e014      	b.n	80052be <__ieee754_atan2+0x12e>
 8005294:	a118      	add	r1, pc, #96	; (adr r1, 80052f8 <__ieee754_atan2+0x168>)
 8005296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800529a:	e7ec      	b.n	8005276 <__ieee754_atan2+0xe6>
 800529c:	2000      	movs	r0, #0
 800529e:	2100      	movs	r1, #0
 80052a0:	e7e9      	b.n	8005276 <__ieee754_atan2+0xe6>
 80052a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052a6:	4619      	mov	r1, r3
 80052a8:	e793      	b.n	80051d2 <__ieee754_atan2+0x42>
 80052aa:	a30f      	add	r3, pc, #60	; (adr r3, 80052e8 <__ieee754_atan2+0x158>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f7fa ff96 	bl	80001e0 <__aeabi_dsub>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	a10d      	add	r1, pc, #52	; (adr r1, 80052f0 <__ieee754_atan2+0x160>)
 80052ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052be:	f7fa ff8f 	bl	80001e0 <__aeabi_dsub>
 80052c2:	e786      	b.n	80051d2 <__ieee754_atan2+0x42>
 80052c4:	a10a      	add	r1, pc, #40	; (adr r1, 80052f0 <__ieee754_atan2+0x160>)
 80052c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052ca:	e782      	b.n	80051d2 <__ieee754_atan2+0x42>
 80052cc:	a10c      	add	r1, pc, #48	; (adr r1, 8005300 <__ieee754_atan2+0x170>)
 80052ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d2:	e77e      	b.n	80051d2 <__ieee754_atan2+0x42>
 80052d4:	2000      	movs	r0, #0
 80052d6:	2100      	movs	r1, #0
 80052d8:	e77b      	b.n	80051d2 <__ieee754_atan2+0x42>
 80052da:	a107      	add	r1, pc, #28	; (adr r1, 80052f8 <__ieee754_atan2+0x168>)
 80052dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052e0:	e777      	b.n	80051d2 <__ieee754_atan2+0x42>
 80052e2:	bf00      	nop
 80052e4:	f3af 8000 	nop.w
 80052e8:	33145c07 	.word	0x33145c07
 80052ec:	3ca1a626 	.word	0x3ca1a626
 80052f0:	54442d18 	.word	0x54442d18
 80052f4:	400921fb 	.word	0x400921fb
 80052f8:	54442d18 	.word	0x54442d18
 80052fc:	3ff921fb 	.word	0x3ff921fb
 8005300:	54442d18 	.word	0x54442d18
 8005304:	3fe921fb 	.word	0x3fe921fb
 8005308:	080054f8 	.word	0x080054f8
 800530c:	08005510 	.word	0x08005510
 8005310:	54442d18 	.word	0x54442d18
 8005314:	c00921fb 	.word	0xc00921fb
 8005318:	54442d18 	.word	0x54442d18
 800531c:	bff921fb 	.word	0xbff921fb
 8005320:	7ff00000 	.word	0x7ff00000

08005324 <__ieee754_sqrt>:
 8005324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005328:	ec55 4b10 	vmov	r4, r5, d0
 800532c:	4e55      	ldr	r6, [pc, #340]	; (8005484 <__ieee754_sqrt+0x160>)
 800532e:	43ae      	bics	r6, r5
 8005330:	ee10 0a10 	vmov	r0, s0
 8005334:	ee10 3a10 	vmov	r3, s0
 8005338:	462a      	mov	r2, r5
 800533a:	4629      	mov	r1, r5
 800533c:	d110      	bne.n	8005360 <__ieee754_sqrt+0x3c>
 800533e:	ee10 2a10 	vmov	r2, s0
 8005342:	462b      	mov	r3, r5
 8005344:	f7fb f904 	bl	8000550 <__aeabi_dmul>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4620      	mov	r0, r4
 800534e:	4629      	mov	r1, r5
 8005350:	f7fa ff48 	bl	80001e4 <__adddf3>
 8005354:	4604      	mov	r4, r0
 8005356:	460d      	mov	r5, r1
 8005358:	ec45 4b10 	vmov	d0, r4, r5
 800535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005360:	2d00      	cmp	r5, #0
 8005362:	dc10      	bgt.n	8005386 <__ieee754_sqrt+0x62>
 8005364:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005368:	4330      	orrs	r0, r6
 800536a:	d0f5      	beq.n	8005358 <__ieee754_sqrt+0x34>
 800536c:	b15d      	cbz	r5, 8005386 <__ieee754_sqrt+0x62>
 800536e:	ee10 2a10 	vmov	r2, s0
 8005372:	462b      	mov	r3, r5
 8005374:	ee10 0a10 	vmov	r0, s0
 8005378:	f7fa ff32 	bl	80001e0 <__aeabi_dsub>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	f7fb fa10 	bl	80007a4 <__aeabi_ddiv>
 8005384:	e7e6      	b.n	8005354 <__ieee754_sqrt+0x30>
 8005386:	1512      	asrs	r2, r2, #20
 8005388:	d074      	beq.n	8005474 <__ieee754_sqrt+0x150>
 800538a:	07d4      	lsls	r4, r2, #31
 800538c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005390:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005398:	bf5e      	ittt	pl
 800539a:	0fda      	lsrpl	r2, r3, #31
 800539c:	005b      	lslpl	r3, r3, #1
 800539e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80053a2:	2400      	movs	r4, #0
 80053a4:	0fda      	lsrs	r2, r3, #31
 80053a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80053aa:	107f      	asrs	r7, r7, #1
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	2516      	movs	r5, #22
 80053b0:	4620      	mov	r0, r4
 80053b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80053b6:	1886      	adds	r6, r0, r2
 80053b8:	428e      	cmp	r6, r1
 80053ba:	bfde      	ittt	le
 80053bc:	1b89      	suble	r1, r1, r6
 80053be:	18b0      	addle	r0, r6, r2
 80053c0:	18a4      	addle	r4, r4, r2
 80053c2:	0049      	lsls	r1, r1, #1
 80053c4:	3d01      	subs	r5, #1
 80053c6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80053ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80053ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80053d2:	d1f0      	bne.n	80053b6 <__ieee754_sqrt+0x92>
 80053d4:	462a      	mov	r2, r5
 80053d6:	f04f 0e20 	mov.w	lr, #32
 80053da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80053de:	4281      	cmp	r1, r0
 80053e0:	eb06 0c05 	add.w	ip, r6, r5
 80053e4:	dc02      	bgt.n	80053ec <__ieee754_sqrt+0xc8>
 80053e6:	d113      	bne.n	8005410 <__ieee754_sqrt+0xec>
 80053e8:	459c      	cmp	ip, r3
 80053ea:	d811      	bhi.n	8005410 <__ieee754_sqrt+0xec>
 80053ec:	f1bc 0f00 	cmp.w	ip, #0
 80053f0:	eb0c 0506 	add.w	r5, ip, r6
 80053f4:	da43      	bge.n	800547e <__ieee754_sqrt+0x15a>
 80053f6:	2d00      	cmp	r5, #0
 80053f8:	db41      	blt.n	800547e <__ieee754_sqrt+0x15a>
 80053fa:	f100 0801 	add.w	r8, r0, #1
 80053fe:	1a09      	subs	r1, r1, r0
 8005400:	459c      	cmp	ip, r3
 8005402:	bf88      	it	hi
 8005404:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005408:	eba3 030c 	sub.w	r3, r3, ip
 800540c:	4432      	add	r2, r6
 800540e:	4640      	mov	r0, r8
 8005410:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005414:	f1be 0e01 	subs.w	lr, lr, #1
 8005418:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800541c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005420:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005424:	d1db      	bne.n	80053de <__ieee754_sqrt+0xba>
 8005426:	430b      	orrs	r3, r1
 8005428:	d006      	beq.n	8005438 <__ieee754_sqrt+0x114>
 800542a:	1c50      	adds	r0, r2, #1
 800542c:	bf13      	iteet	ne
 800542e:	3201      	addne	r2, #1
 8005430:	3401      	addeq	r4, #1
 8005432:	4672      	moveq	r2, lr
 8005434:	f022 0201 	bicne.w	r2, r2, #1
 8005438:	1063      	asrs	r3, r4, #1
 800543a:	0852      	lsrs	r2, r2, #1
 800543c:	07e1      	lsls	r1, r4, #31
 800543e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005442:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005446:	bf48      	it	mi
 8005448:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800544c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005450:	4614      	mov	r4, r2
 8005452:	e781      	b.n	8005358 <__ieee754_sqrt+0x34>
 8005454:	0ad9      	lsrs	r1, r3, #11
 8005456:	3815      	subs	r0, #21
 8005458:	055b      	lsls	r3, r3, #21
 800545a:	2900      	cmp	r1, #0
 800545c:	d0fa      	beq.n	8005454 <__ieee754_sqrt+0x130>
 800545e:	02cd      	lsls	r5, r1, #11
 8005460:	d50a      	bpl.n	8005478 <__ieee754_sqrt+0x154>
 8005462:	f1c2 0420 	rsb	r4, r2, #32
 8005466:	fa23 f404 	lsr.w	r4, r3, r4
 800546a:	1e55      	subs	r5, r2, #1
 800546c:	4093      	lsls	r3, r2
 800546e:	4321      	orrs	r1, r4
 8005470:	1b42      	subs	r2, r0, r5
 8005472:	e78a      	b.n	800538a <__ieee754_sqrt+0x66>
 8005474:	4610      	mov	r0, r2
 8005476:	e7f0      	b.n	800545a <__ieee754_sqrt+0x136>
 8005478:	0049      	lsls	r1, r1, #1
 800547a:	3201      	adds	r2, #1
 800547c:	e7ef      	b.n	800545e <__ieee754_sqrt+0x13a>
 800547e:	4680      	mov	r8, r0
 8005480:	e7bd      	b.n	80053fe <__ieee754_sqrt+0xda>
 8005482:	bf00      	nop
 8005484:	7ff00000 	.word	0x7ff00000

08005488 <_init>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr

08005494 <_fini>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr
